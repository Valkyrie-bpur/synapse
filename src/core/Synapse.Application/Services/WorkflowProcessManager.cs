/*
 * Copyright © 2022-Present The Synapse Authors
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

using System.Collections.Concurrent;

namespace Synapse.Application.Services
{

    /// <summary>
    /// Represents the default implementation of the <see cref="IWorkflowProcessManager"/> interface
    /// </summary>
    public class WorkflowProcessManager
        : BackgroundService, IWorkflowProcessManager
    {

        /// <summary>
        /// Initializes a new <see cref="WorkflowProcessManager"/>
        /// </summary>
        /// <param name="serviceProvider">The current <see cref="IServiceProvider"/></param>
        /// <param name="logger">The service used to perform logging</param>
        /// <param name="runtime">The <see cref="IWorkflowRuntime"/> used to create <see cref="IWorkflowProcess"/>es</param>
        public WorkflowProcessManager(IServiceProvider serviceProvider, ILogger<WorkflowProcessManager> logger, IWorkflowRuntime runtime)
        {
            this.ServiceProvider = serviceProvider;
            this.Logger = logger;
            this.Runtime = runtime;
        }

        /// <summary>
        /// Gets the current <see cref="IServiceProvider"/>
        /// </summary>
        protected IServiceProvider ServiceProvider { get; }

        /// <summary>
        /// Gets the service used to perform logging
        /// </summary>
        protected ILogger Logger { get; }

        /// <summary>
        /// Gets the <see cref="IWorkflowRuntime"/> used to create <see cref="IWorkflowProcess"/>es
        /// </summary>
        protected IWorkflowRuntime Runtime { get; }

        /// <summary>
        /// Gets a <see cref="ConcurrentDictionary{TKey, TValue}"/> containing all available <see cref="IWorkflowProcess"/>es
        /// </summary>
        protected ConcurrentDictionary<string, IWorkflowProcess> Processes { get; } = new();

        /// <summary>
        /// Gets the <see cref="WorkflowProcessManager"/>'s <see cref="System.Threading.CancellationTokenSource"/>
        /// </summary>
        protected CancellationTokenSource CancellationTokenSource { get; private set; } = null!;

        /// <inheritdoc/>
        protected override Task ExecuteAsync(CancellationToken stoppingToken)
        {
            this.CancellationTokenSource = CancellationTokenSource.CreateLinkedTokenSource(stoppingToken);
            return Task.CompletedTask;
        }

        /// <inheritdoc/>
        public virtual async Task<IWorkflowProcess> StartProcessAsync(V1Workflow workflow, V1WorkflowInstance workflowInstance, CancellationToken cancellationToken = default)
        {
            if (workflow == null)
                throw new ArgumentNullException(nameof(workflow));
            if (workflowInstance == null)
                throw new ArgumentNullException(nameof(workflowInstance));
            var process = await this.Runtime.CreateProcessAsync(workflow, workflowInstance, cancellationToken);
            process.Logs.SubscribeAsync(async log => await this.OnProcessLogAsync(process, log));
            process.Exited += (sender, e) => this.OnProcessExitedAsync((IWorkflowProcess)sender!);
            process.Disposed += (sender, e) => this.OnProcessDisposed((IWorkflowProcess)sender!);
            this.Processes.AddOrUpdate(process.Id, process, (key, existing) => throw new DuplicateWaitObjectException(nameof(key)));
            using var scope = this.ServiceProvider.CreateScope();
            var processStates = scope.ServiceProvider.GetRequiredService<IRepository<V1WorkflowProcess>>();
            await processStates.AddAsync(new(process.Id), this.CancellationTokenSource.Token);
            await processStates.SaveChangesAsync(cancellationToken);
            await process.StartAsync(cancellationToken);
            return process;
        }

        /// <inheritdoc/>
        public virtual IWorkflowProcess GetProcessById(string id)
        {
            if (string.IsNullOrWhiteSpace(id))
                throw new ArgumentNullException(nameof(id));
            if (!this.Processes.TryGetValue(id, out var process))
                throw new NullReferenceException($"Failed to find a process with the specified id '{id}'");
            return process;
        }

        /// <summary>
        /// Handles logs generated by the specified <see cref="IWorkflowProcess"/>
        /// </summary>
        /// <param name="process">The <see cref="IWorkflowProcess"/> that produced the log</param>
        /// <param name="log">The log that has been produced</param>
        /// <returns>A new awaitable <see cref="Task"/></returns>
        protected virtual async Task OnProcessLogAsync(IWorkflowProcess process, string log)
        {
            using var scope = this.ServiceProvider.CreateScope();
            var processStates = scope.ServiceProvider.GetRequiredService<IRepository<V1WorkflowProcess>>();
            while (true)
            {
                try
                {
                    var processState = await processStates.FindAsync(process.Id);
                    processState.AppendLog(log);
                    await processStates.UpdateAsync(processState, this.CancellationTokenSource.Token);
                    await processStates.SaveChangesAsync(this.CancellationTokenSource.Token);
                    break;
                }
                catch (OptimisticConcurrencyException ex)
                {
                    this.Logger.LogWarning("An optimistic concurrency exception has occured while the logs of the process with id '{processId}'. Retrying with latest state: {ex}", process.Id, ex);
                    continue;
                }
                catch (Exception ex)
                {
                    this.Logger.LogError("An error occured while processing the logs of the process with id '{processId}': {ex}", process.Id, ex);
                }
            }
        }

        /// <summary>
        /// Handles the exit of the specified <see cref="IWorkflowProcess"/>
        /// </summary>
        /// <param name="process">The <see cref="IWorkflowProcess"/> that has exited</param>
        protected virtual async void OnProcessExitedAsync(IWorkflowProcess process)
        {
            using var scope = this.ServiceProvider.CreateScope();
            var processStates = scope.ServiceProvider.GetRequiredService<IRepository<V1WorkflowProcess>>();
            while (true)
            {
                try
                {
                    var processState = await processStates.FindAsync(process.Id);
                    processState.Exit(process.ExitCode!.Value);
                    await processStates.UpdateAsync(processState, this.CancellationTokenSource.Token);
                    await processStates.SaveChangesAsync(this.CancellationTokenSource.Token);
                    await process.DisposeAsync();
                    break;
                }
                catch (OptimisticConcurrencyException ex)
                {
                    this.Logger.LogWarning("An optimistic concurrency exception has occured while updating the process with id '{processId}'. Retrying with latest state: {ex}", process.Id, ex);
                    continue;
                }
                catch (Exception ex)
                {
                    this.Logger.LogError("An error occured while updating the process with id '{processId}': {ex}", process.Id, ex);
                }
            }
           
        }

        /// <summary>
        /// handles the disposal of the specified <see cref="IWorkflowProcess"/>
        /// </summary>
        /// <param name="process">The <see cref="IWorkflowProcess"/> to handle the disposal of</param>
        protected virtual void OnProcessDisposed(IWorkflowProcess process)
        {
            this.Processes.Remove(process.Id, out _);
        }

        /// <inheritdoc/>
        public override void Dispose()
        {
            this.CancellationTokenSource?.Dispose();
            foreach(var process in this.Processes.Values.ToList())
            {
                process.Dispose();
            }
            base.Dispose();
            GC.SuppressFinalize(this);
        }

    }

}
