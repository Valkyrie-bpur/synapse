@* 
    Copyright © 2022-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard
@inject IDispatcher Dispatcher
@inject IBreadcrumbManager BreadcrumbService

@if (WorkflowInstance != null)
{
    <Toolbar>
        <button @onclick="@(async () => await OnNavigateToWorkflow())" class="btn btn-outline-dark" title="Back to list"><small class="bi bi-arrow-left"></small><span class="btn-label">&nbsp; Back to list</span></button>
        @if(WorkflowInstance.Status == V1WorkflowInstanceStatus.Running) 
        {
            <button @onclick="() => Dispatcher.Dispatch(new SuspendV1WorkflowInstance(WorkflowInstance.Id))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="bi bi-pause"></small><span class="btn-label"> Suspend</span></button>
        }
        @if(WorkflowInstance.Status == V1WorkflowInstanceStatus.Suspended) 
        {
            <button @onclick="() => Dispatcher.Dispatch(new ResumeV1WorkflowInstance(WorkflowInstance.Id))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="bi bi-play"></small><span class="btn-label"> Resume</span></button>
        }
        @if (WorkflowInstance.Status <= V1WorkflowInstanceStatus.Resuming) 
        {
            <button @onclick="() => Dispatcher.Dispatch(new CancelV1WorkflowInstance(WorkflowInstance.Id))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="bi bi-stop"></small><span class="btn-label"> Cancel</span></button>
        }
    </Toolbar>
}

@code {
    [Parameter] public V1WorkflowInstance WorkflowInstance { get; set; } = null!;

    protected async Task OnNavigateToWorkflow()
    {
        var workflowItem = this.BreadcrumbService.Items.Take(this.BreadcrumbService.Items.Count - 1).Last();
        await this.BreadcrumbService.NavigateTo(workflowItem);
    }

}
