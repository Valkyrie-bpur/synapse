@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard

@if(authentication != null)
{
    <table class="table table-striped">
        <tbody>
            <tr>
                <td>Name</td>
                <td><input type="text" value="@authentication.Name" required placeholder="Name" title="The authentication name" class="form-control"
                    @onchange="async e => await OnPropertyChangedAsync(nameof(authentication.Name), a => a.Name = (string)e.Value!)"/></td>
            </tr>
            <tr>
                <td>Scheme</td>
                <td>
                    <select class="form-select bg-secondary text-white"
                    @onchange="async e => await OnAuthenticationSchemeChangedAsync(EnumHelper.Parse<AuthenticationScheme>((string)e.Value!))">
                        @foreach(var scheme in Enum.GetValues<AuthenticationScheme>())
                        {
                            var schemeStr = @EnumHelper.Stringify(scheme);
                            <option value="@schemeStr" selected="@(authentication.Scheme == scheme)">@schemeStr</option>
                        }
                    </select>
                </td>
            </tr>
            <ExpandableDataRow IsExpanded="true">
                <Header>
                    <td>Properties</td>
                    <td>
                        <div class="input-group">
                            <div class="input-group-text">
                                <input class="form-check-input mt-0 me-2" type="checkbox" value="@useSecretBasedProperties" checked="@useSecretBasedProperties"
                                @onclick="OnUseSecretBasedPropertiesChanged">
                                <label title="Indicates whether or not to load the authentication properties from a secret">Load properties from secret</label>
                            </div>
                            @if (useSecretBasedProperties)
                            {
                                <SecretSelector 
                                    Secrets="Workflow.Secrets"
                                    Selected="@(((SecretBasedAuthenticationProperties)authentication.Properties).Secret)"
                                    OnChange="async secret => await OnPropertyChangedAsync(nameof(authentication.Properties), a => a.SecretRef = secret)"/>
                            }
                        </div>
                    </td>
                </Header>
                <Body>
                    @if(!useSecretBasedProperties)
                    {
                        <td colspan="2">
                            @switch (authentication.Scheme)
                            {
                                case AuthenticationScheme.Basic:
                                    if(authentication.Properties is not BasicAuthenticationProperties basic)
                                    {
                                        basic = new();
                                        authentication.Properties = basic;
                                    }
                                    <table class="table table-striped">
                                        <tbody>
                                            <tr>
                                                <td>Username</td>
                                                <td><input type="text" value="@basic.Username" required placeholder="Username" title="The username to use to authenticate" class="form-control"
                                                    @onchange="async e => await OnAuthenticationPropertiesChangedAsync<BasicAuthenticationProperties>(p => p.Username =  (string)e.Value!)"/></td>
                                            </tr>
                                            <tr>
                                                <td>Password</td>
                                                <td><input type="text" value="@basic.Password" required placeholder="Password" title="The password to use to authenticate" class="form-control"
                                                    @onchange="async e => await OnAuthenticationPropertiesChangedAsync<BasicAuthenticationProperties>(p => p.Password =  (string)e.Value!)"/></td>
                                            </tr>
                                        </tbody>
                                    </table>
                                    break;
                                case AuthenticationScheme.Bearer:
                                    if(authentication.Properties is not BearerAuthenticationProperties bearer)
                                    {
                                        bearer = new();
                                        authentication.Properties = bearer;
                                    }
                                    <table class="table table-striped">
                                        <tbody>
                                            <tr>
                                                <td>Token</td>
                                                <td><textarea placeholder="Token" title="The token to use to authenticate" class="form-control"
                                                    @onchange="async e => await OnPropertyChangedAsync(nameof(authentication.Properties), a => ((BearerAuthenticationProperties)a.Properties).Token = (string)e.Value!)">@bearer.Token</textarea></td>
                                            </tr>
                                        </tbody>
                                    </table>
                                    break;
                                case AuthenticationScheme.OAuth2:
                                    if(authentication.Properties is not OAuth2AuthenticationProperties oauth2)
                                    {
                                        oauth2 = new();
                                        authentication.Properties = oauth2;
                                    }
                                    break;
                                default:
                                    <span class="text-danger">The specified authentication scheme '@(EnumHelper.Stringify(authentication.Scheme))' is not supported</span>
                                    break;
                            }
                        </td>
                    }
                </Body>
            </ExpandableDataRow>
        </tbody>
    </table>
}

@code {

    private bool useSecretBasedProperties = false;

    [CascadingParameter] public WorkflowDefinition Workflow { get; set; } = null!;

    private AuthenticationDefinition? authentication;
    [Parameter] public AuthenticationDefinition? Authentication { get; set; }

    [Parameter] public EventCallback<AuthenticationDefinition> OnChange { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (Authentication == null)
            return;
        if (this.authentication == this.Authentication)
            return;
        this.authentication = this.Authentication;
        this.useSecretBasedProperties = this.authentication.Properties is SecretBasedAuthenticationProperties;
    }

    protected virtual async Task OnUseSecretBasedPropertiesChanged()
    {
        if (Authentication == null)
            return;
        this.useSecretBasedProperties = !useSecretBasedProperties;
        if(!this.useSecretBasedProperties)
            return;
        this.Authentication.SecretRef = "undefined";
        await this.OnChange.InvokeAsync(this.Authentication);
        this.StateHasChanged();
    }

    protected virtual async Task OnAuthenticationSchemeChangedAsync(AuthenticationScheme scheme)
    {
        if (this.authentication == null)
            return;
        this.useSecretBasedProperties = false;
        await this.OnPropertyChangedAsync(nameof(Authentication.Scheme), a =>
        {
            a.Scheme = scheme;
            a.Properties = a.Scheme switch
            {
                AuthenticationScheme.Basic => new BasicAuthenticationProperties(),
                AuthenticationScheme.Bearer => new BearerAuthenticationProperties(),
                AuthenticationScheme.OAuth2 => new BearerAuthenticationProperties(),
                _ => throw new NotSupportedException($"The specified {nameof(AuthenticationScheme)} '{a.Scheme}' is not supported")
            };
        });
    }

    protected virtual async Task OnAuthenticationPropertiesChangedAsync<TAuthenticationProperties>(Action<TAuthenticationProperties> patch)
        where TAuthenticationProperties : AuthenticationProperties
    {
        var authenticationProperties = (TAuthenticationProperties)this.authentication!.Properties;
        patch(authenticationProperties);
        await this.OnPropertyChangedAsync(nameof(Authentication.Properties), a => a.Properties = authenticationProperties);
    }

    protected virtual async Task OnPropertyChangedAsync(string property, Action<AuthenticationDefinition> patchAction)
    {
        if (this.authentication == null)
            return;
        patchAction(this.authentication);
        await this.OnChange.InvokeAsync(this.authentication);
        this.StateHasChanged();
    }

}
