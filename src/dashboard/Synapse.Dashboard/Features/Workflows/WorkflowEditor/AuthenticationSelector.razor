@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard

<select class="form-select @CssClass" @onchange="OnStateSelectorValueChangedAsync">
    @if(Selected == null)
    {
        <option disabled selected value> -- select an authentication -- </option>
    }
    else
    {
        <option disabled value> -- select an authentication -- </option>
    }
    @if(authentications != null)
    {
        @foreach(var authentication in authentications!)
        {
            if(authentication == Selected)
            {
                <option value="@authentication.Name" selected>@authentication.Name [@EnumHelper.Stringify(authentication.Scheme)]</option>
            }
            else
            {
                <option value="@authentication.Name">@authentication.Name [@EnumHelper.Stringify(authentication.Scheme)]</option>
            }
        }
    }
    @if (AddCreateNewOption)
    {
        <option disabled value>--------------------</option>
        <option value="@CreateNewOptionValue">Create new authentication</option>
    }
</select>

@code {

    private string CreateNewOptionValue = "__wff:create";

    [CascadingParameter] public WorkflowDefinition Workflow { get; set; } = null!;

    [Parameter] public string? CssClass{ get; set; }

    [Parameter] public bool AddCreateNewOption { get; set; } = true;

    [Parameter] public AuthenticationDefinition? Selected { get; set; }

    private List<AuthenticationDefinition>? authentications { get; set; }
    [Parameter] public List<AuthenticationDefinition>? Authentications { get; set; }

    [Parameter] public EventCallback<AuthenticationDefinition> OnChange { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.authentications != this.Authentications)
            this.authentications = this.Authentications;
    }

    protected virtual async Task OnStateSelectorValueChangedAsync(ChangeEventArgs e)
    {
        if (e.Value == null)
            return;
        var authentication = Workflow.GetAuthentication((string)e.Value!);
        if ((string)e.Value == CreateNewOptionValue)
        {
            if (this.Workflow.Auth == null)
                this.Workflow.Auth = new();
            authentication = new AuthenticationDefinition() { Name = $"authentication-{this.Workflow.Auth.Count + 1}", Scheme = AuthenticationScheme.Basic, Properties = new BasicAuthenticationProperties() };
            this.Workflow.Auth.Add(authentication);
        }
        this.Selected = authentication;
        await this.OnChange.InvokeAsync(authentication);
    }

}
