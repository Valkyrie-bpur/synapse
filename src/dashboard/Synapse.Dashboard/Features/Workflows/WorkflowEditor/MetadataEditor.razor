@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard
@using Neuroglia.Serialization

<table class="table">
    <tbody>
        @if(metadata != null)
        {
            var metadataDictionary = (IDictionary<string, object>)metadata.ToObject()!;
            var index = -1;
            @foreach (var kvp in metadataDictionary)
            {
                index++;
                <ExpandableDataRow>
                    <Header>
                        <td>@kvp.Key</td>
                        <td>@kvp.Value</td>
                        <td class="d-flex justify-content-end"><button @onclick="async () => await OnMetadataPropertyRemovedAsync(kvp.Key)" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="bi bi-trash"></small></button></td>
                    </Header>
                    <Body>
                        <td colspan="4">
                            <table class="table table-striped">
                                <tbody>
                                    <tr>
                                        <td>Name</td>
                                        <td><input type="text" value="@kvp.Key" required placeholder="Name" title="The name of the metadata property to add" class="form-control"
                                            @onchange="async e => await OnMetadataPropertyNameChangedAsync(index, (string)e.Value!)"/></td>
                                    </tr>
                                    <tr>
                                        <td>Value</td>
                                        <td><input type="text" value="@kvp.Value" required placeholder="Value" title="The value of the metadata property to add" class="form-control"
                                            @onchange="async e => await OnMetadataPropertyValueChangedAsync(kvp.Key, e.Value)"/></td>
                                    </tr>
                                </tbody>
                            </table>
                        </td>
                    </Body>
                </ExpandableDataRow>
            }
        }
    </tbody>
</table>
<button class="btn btn-block btn-primary text-white w-100" @onclick="OnAddMetadataPropertyAsync">Add metadata property</button>

@code {

    [CascadingParameter] public WorkflowDefinition Workflow { get; set; } = null!;

    private DynamicObject? metadata;
    [Parameter] public DynamicObject? Metadata { get; set; }

    [Parameter] public EventCallback<DynamicObject> OnChange { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (Metadata == null)
            return;
        if (this.metadata == this.Metadata)
            return;
        this.metadata = this.Metadata;
    }

    protected virtual async Task OnAddMetadataPropertyAsync()
    {
        if (this.Workflow == null)
            return;
        if (this.metadata == null)
            this.metadata = new();
        this.metadata.Set("undefined", "undefined");
        await this.OnChange.InvokeAsync(this.metadata);
        this.StateHasChanged();
    }

    protected virtual async Task OnMetadataPropertyNameChangedAsync(int index, string name)
    {
        if (this.Workflow == null || this.metadata == null)
            return;
        if (this.metadata == null)
            this.metadata = new();
        var obsolete = this.metadata.DynamicProperties.ElementAt(index);
        this.metadata.Remove(obsolete.Key);
        if (index >= this.metadata.DynamicProperties.Count)
            index = this.metadata.DynamicProperties.Count - 1;
        if (index < 0)
            index = 0;
        if (this.metadata.DynamicProperties.Any())
            this.metadata.Insert(index, name, obsolete.Value);
        else
            this.metadata.Set(name, obsolete.Value);
        await this.OnChange.InvokeAsync(this.metadata);
        this.StateHasChanged();
    }

    protected virtual async Task OnMetadataPropertyValueChangedAsync(string name, object? value)
    {
        if (this.Workflow == null || this.metadata == null)
            return;
        if (this.metadata == null)
            this.metadata = new();
        if (!this.metadata.TryGet(name, out var currentValue) || value == currentValue)
            return;
        this.metadata.Set(name, value);
        await this.OnChange.InvokeAsync(this.metadata);
        this.StateHasChanged();
    }

    protected virtual async Task OnMetadataPropertyRemovedAsync(string name)
    {
        if (this.Workflow == null || this.metadata == null)
            return;
        if (this.metadata == null)
            this.metadata = new();
        if (!this.metadata.Remove(name))
            return;
        if (!this.metadata.DynamicProperties.Any())
            this.metadata = null;
        await this.OnChange.InvokeAsync(this.metadata);
        this.StateHasChanged();
    }

}
