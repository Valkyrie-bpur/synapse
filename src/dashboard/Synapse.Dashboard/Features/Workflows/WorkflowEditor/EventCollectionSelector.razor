@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard

<select class="form-select @CssClass" multiple @onchange="OnStateSelectorValueChangedAsync">
    <option disabled selected="@(Selected == null || !Selected.Any())" value> -- select an event -- </option>
    @if(events != null)
    {
        @foreach(var evt in events.OrderBy(e => e.Name))
        {
           <option value="@evt.Name" selected="@(Selected?.Any(e => e.Name == evt.Name))" title="@evt.Name [source: @evt.Source | type: @evt.Type]">@evt.Name</option>
        }
    }
</select>

@code {

    [CascadingParameter] public WorkflowDefinition Workflow { get; set; } = null!;

    [Parameter] public string? CssClass{ get; set; }

    [Parameter] public bool AddCreateNewOption { get; set; } = true;

    [Parameter] public List<EventDefinition>? Selected { get; set; }

    private List<EventDefinition>? events { get; set; }
    [Parameter] public List<EventDefinition>? Events { get; set; }

    [Parameter] public EventKind? EventKind { get; set; }

    [Parameter] public EventCallback<List<EventDefinition>> OnChange { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.events != this.Events) {
            this.events = this.Events;
        }
    }

    protected virtual async Task OnStateSelectorValueChangedAsync(ChangeEventArgs e)
    {
        if (e.Value == null)
            return;
        var eventNames = ((string[])e.Value).ToList();
        if (eventNames == null)
            eventNames = new();
        var events = new List<EventDefinition>();
        if (eventNames != null)
            events.AddRange(eventNames.Select(n => Workflow.GetEvent(n)!).ToList());
        this.Selected = events;
        await this.OnChange.InvokeAsync(events);
    }

}
