@*
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard

<table class="table table-striped">
    <tbody>
        <tr>
            <td>Type</td>
            <td>
                <select class="form-control" @onchange="async e => await OnTypeChangedAsync(EnumHelper.Parse<ScheduleDefinitionType>((string)e.Value!))">
                    @foreach (var type in Enum.GetValues<ScheduleDefinitionType>())
                    {
                        <option value="@EnumHelper.Stringify(type)" selected="@(scheduleType == type)">@type</option>
                    }
                </select>
            </td>
        </tr>
        @switch(scheduleType)
        {
            case ScheduleDefinitionType.Cron:
                <tr title="The CRON expression used to define the frequency at which to trigger new workflow occurences">
                    <td>Expression</td>
                    <td>
                        <input type="text" required placeholder="* * * * *" value="@schedule?.Cron?.Expression" class="form-control" 
                        @onchange="async e => await OnChangedAsync(s => { if(s.Cron == null) s.Cron = new(); s.Cron.Expression = (string)e.Value!; })" />
                    </td>
                </tr>
                <tr title="The date and time after which to retire the schedule">
                    <td>Valid until</td>
                    <td>
                        <input type="datetime" required value="@schedule?.Cron?.ValidUntil" class="form-control" 
                        @onchange="async e => await OnChangedAsync(s => { if(s.Cron == null) s.Cron = new(); s.Cron.ValidUntil = string.IsNullOrWhiteSpace((string)e.Value!) ? null : DateTime.Parse((string)e.Value!); })" />
                    </td>
                </tr>
                break;
            case ScheduleDefinitionType.Interval:
                <tr title="The interval to wait after the completion of an occurence to trigger a new one">
                    <td>Interval</td>
                    <td>
                        <input type="time" required value="@schedule?.Interval" class="form-control" 
                        @onchange="async e => await OnChangedAsync(s => s.Interval = string.IsNullOrWhiteSpace((string)e.Value!) ? null : TimeSpan.Parse((string)e.Value!))"/>
                    </td>
                </tr>
                break;
            default:
                throw new NotSupportedException($"The specified {nameof(ScheduleDefinitionType)} '{scheduleType}' is not supported");
        }
    </tbody>
</table>

@code {
    private ScheduleDefinitionType scheduleType;

    private ScheduleDefinition? schedule;
    [Parameter] public ScheduleDefinition? Schedule { get; set; }

    [Parameter] public EventCallback<ScheduleDefinition> OnChange { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.scheduleType = this.schedule == null ? ScheduleDefinitionType.Cron : this.schedule.Type;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        var updated = false;
        if (this.schedule != this.Schedule)
        {
            this.schedule = this.Schedule;
            updated = true;
        }
        if (!updated)
            return;
    }

    private async Task OnTypeChangedAsync(ScheduleDefinitionType scheduleType)
    {
        await this.OnChangedAsync(s =>
        {
            switch(scheduleType)
            {
                case ScheduleDefinitionType.Cron:
                    s.Interval = null;
                    s.Cron = new();
                    break;
                case ScheduleDefinitionType.Interval:
                    s.Interval = TimeSpan.Zero;
                    s.Cron = null;
                    break;
                default:
                    throw new NotSupportedException($"The specified {nameof(ScheduleDefinitionType)} '{scheduleType}' is not supported");
            }
        });
    }

    private async Task OnChangedAsync(Action<ScheduleDefinition> patch)
    {
        if (this.schedule == null)
            this.schedule = new();
        patch(this.schedule);
        if (this.schedule.Cron == null && !this.schedule.Interval.HasValue)
            this.schedule = null;
        this.scheduleType = this.schedule == null ? ScheduleDefinitionType.Cron : this.schedule.Type;
        await this.OnChange.InvokeAsync(this.schedule);
        this.StateHasChanged();
    }

}
