@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard
@using Microsoft.OpenApi.Models
@using Neuroglia.Data
@using Neuroglia.Data.Services
@inject ISchemaRegistry SchemaRegistry

<select required class="form-select" 
@onchange="async e => await OnOperationChangedAsync((string?)e.Value)">
    @if(string.IsNullOrWhiteSpace(OperationId))
    {
        <option disabled selected value> -- select an operation -- </option>
    }
    else
    {
        <option disabled value> -- select an operation -- </option>
    }
    @if(schema != null)
    {
        @foreach(var operation in  schema.Document.Paths.Values
            .SelectMany(p => p.Operations.Values)
            .OrderBy(o => o.OperationId)
            .ToList())
        {
            if(operation.OperationId == OperationId)
            {
                <option value="@operation.OperationId" selected title="@operation.Description">@operation.OperationId</option>
            }
            else
            {
                <option value="@operation.OperationId" title="@operation.Description">@operation.OperationId</option>
            }
        }
    }
</select>

@code {

    [Parameter] public Uri? DocumentUri { get; set; }

    [Parameter] public string? OperationId { get; set; }

    [Parameter] public EventCallback<string?> OnChange { get; set; }

    private ISchemaDescriptor<OpenApiDocument>? schema;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.DocumentUri == null)
            return;
        this.schema = await this.SchemaRegistry.GetOpenApiSchemaAsync(this.DocumentUri);
    }

    protected virtual async Task OnOperationChangedAsync(string? operation)
    {
        await this.OnChange.InvokeAsync(operation);
    }

}
