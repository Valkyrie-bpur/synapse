@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard
@using Newtonsoft.Json.Schema
@using System.Dynamic
@using Synapse.Dashboard.Pages.Workflows.Editor.Actions
@using Synapse.Dashboard.Pages.Workflows.Editor.State
@inherits StatefulComponent<WorkflowEditorState>
@inject IDispatcher Dispatcher

@if(workflow != null)
{

    <CascadingValue Value="workflow">

        <!-- General -->
        <div class="border border-secondary rounded-2 p-3 mb-3">
            <Expander IsExpanded="@(State.ExpanderStates!["general"])" OnToggleExpand="@(isExpanded => OnToggleExpand("general", isExpanded))">
                <Header>
                    <h5><span class="bi bi-info-circle me-2"></span>General</h5>
                </Header>
                <Body>
                    <table class="table">
                        <tbody>
                            <tr><td>Name</td><td><input type="text" placeholder="Name" required value="@workflow.Name" @onchange="async e => await OnNameChangedAsync((string?)e.Value)" class="form-control" /></td></tr>
                            <tr><td>Id</td>
                            <td>
                                <div class="input-group mb-3">
                                    <input type="text" placeholder="Id" readonly="@autoGenerateId" required value="@workflow.Id" @onchange="async e => await OnPropertyChangedAsync(nameof(workflow.Id), d => d.Id = (string)e.Value!)" class="form-control" />
                                    <div class="input-group-text">
                                        <input class="form-check-input mt-0" type="checkbox" checked="@autoGenerateId" @onchange="async e => await OnAutoGenerateIdChanged((bool)e.Value)">
                                        <label class="ms-1" title="Auto-generate the workflow id based on its sluggified, kebab-cased name">Auto-generate</label>
                                    </div>
                                </div>
                            </td></tr>
                            <tr><td>Description</td><td><textarea type="text" placeholder="Description" value="@workflow.Description" @onchange="async e => await OnPropertyChangedAsync(nameof(workflow.Description), d => d.Description = (string)e.Value!)" class="form-control"></textarea></td></tr>
                            <tr><td>Version</td><td><input type="text" placeholder="Version" required value="@workflow.Version" @onchange="async e => await OnPropertyChangedAsync(nameof(workflow.Version), d => d.Version = (string)e.Value!)" class="form-control" /></td></tr>
                            <tr>
                                <td>Spec version</td>
                                <td>
                                    <select required @onchange="async e => await OnPropertyChangedAsync(nameof(workflow.SpecVersion), d => d.SpecVersion = (string)e.Value!)" class="form-select bg-secondary text-white">
                                <option value="0.8" selected>0.8</option>
                            </select></td></tr>
                            <tr>
                                <td>Expression language</td>
                                <td>
                                    <select required @onchange="async e => await OnPropertyChangedAsync(nameof(workflow.ExpressionLanguage), d => d.ExpressionLanguage = (string)e.Value!)" class="form-select bg-secondary text-white">
                                <option value="jq">jq</option>
                            </select></td></tr>
                            <tr><td>Keep active</td><td><input type="checkbox" placeholder="0.1.0" required value="@workflow.KeepActive" @onchange="async e => await OnPropertyChangedAsync(nameof(workflow.KeepActive), d => d.KeepActive = (bool)e.Value!)" class="form-check-input" /></td></tr>
                        </tbody>
                    </table>
                </Body>
            </Expander>
        </div>
    
        <!-- States -->
        <div class="border border-secondary rounded-2 p-3 mb-3">
            <Expander IsExpanded="@(State.ExpanderStates!["states"])" OnToggleExpand="@(isExpanded => OnToggleExpand("states", isExpanded))">
                <Header>
                    <h5><span class="bi bi-box-seam me-2"></span>States</h5>
                </Header>
                <Body>
                    @if(workflow.States.Any())
                    {
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Type</th>
                                    <th>Outcome</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var state in workflow.States)
                                {
                                    <ExpandableDataRow>
                                        <Header>
                                            <td>@state.Name</td>
                                            <td><span class="badge bg-secondary">@EnumHelper.Stringify(state.Type)</span></td>
                                            <td>@(state.IsEnd ? "End workflow" : $"Transition to '{state.TransitionToStateName}'")</td>
                                            <td>
                                                @if(state == workflow.GetStartState())
                                                {
                                                    <span class="badge bg-success text-white mx-1" title="First state in the workflow">start</span>
                                                }
                                                @if (state.IsEnd)
                                                {
                                                    <span class="badge bg-warning text-white mx-1" title="Ends the workflow">end</span>
                                                }
                                                @if(!string.IsNullOrWhiteSpace(state.CompensatedBy))
                                                {
                                                    <span class="badge bg-primary text-white mx-1" title="Is compensated by another state">compensated</span>
                                                }
                                                @if(state.UsedForCompensation)
                                                {
                                                    <span class="badge bg-danger text-white mx-1" title="Is compensating another state">compensating</span>
                                                }
                                                @if(state.Errors != null
                                                && state.Errors.Any())
                                                {
                                                    <span class="badge bg-danger text-white mx-1" title="Is fault tolerant and handles defined errors">fault</span>
                                                }
                                            </td>
                                            <td class="d-flex justify-content-end"><button @onclick="async () => await OnPropertyChangedAsync(nameof(workflow.States), d => d.States?.Remove(state))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="bi bi-trash"></small></button></td>
                                        </Header>
                                        <Body>
                                            <td colspan="5">
                                                <StateEditor State="@state" OnChange="async () => await OnStatePropertyChangedAsync(state)" />
                                            </td>
                                        </Body>
                                    </ExpandableDataRow>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <button class="btn btn-block btn-warning text-white w-100" @onclick="OnCreateStateAsync">Create start state</button>
                    }
                </Body>
            </Expander>
        </div>

        <!-- Events -->
        <div class="border border-secondary rounded-2 p-3 mb-3">
            <Expander IsExpanded="@(State.ExpanderStates!["events"])" OnToggleExpand="@(isExpanded => OnToggleExpand("events", isExpanded))">
                <Header>
                    <h5><span class="bi bi-cloud me-2"></span>Events</h5>
                </Header>
                <Body>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Kind</th>
                                <th>Source</th>
                                <th>Type</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if(workflow.Events != null)
                            {
                                @foreach (var e in workflow.Events)
                                {
                                    <ExpandableDataRow>
                                        <Header>
                                            <td>@e.Name</td>
                                            <td><span class="badge bg-secondary">@EnumHelper.Stringify(e.Kind)</span></td>
                                            <td class="text-break"><a href="@e.Source" target="_blank">@e.Source</a></td>
                                            <td>@e.Type</td>
                                            <td>
                                                @if(e.Correlations != null && e.Correlations.Any())
                                                {
                                                    <span class="badge bg-success text-white mx-1" title="Is compensated by another state">correlated</span>
                                                }
                                            </td>
                                            <td class="d-flex justify-content-end"><button @onclick="async () => await OnPropertyChangedAsync(nameof(Workflow.Events), d => d.Events?.Remove(e))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="bi bi-trash"></small></button></td>
                                        </Header>
                                        <Body>
                                            <td colspan="6">
                                                <EventEditor Event="@e" OnChange="OnEventEditorChanged" />
                                            </td>
                                        </Body>
                                    </ExpandableDataRow>
                                }
                            }
                        </tbody>
                    </table>
                    <button class="btn btn-block btn-warning text-white w-100" @onclick="OnCreateEventAsync">Create new event</button>
                </Body>
            </Expander>
        </div>

        <!-- Functions -->
        <div class="border border-secondary rounded-2 p-3 mb-3">
            <Expander IsExpanded="@(State.ExpanderStates!["functions"])" OnToggleExpand="@(isExpanded => OnToggleExpand("functions", isExpanded))">
                <Header>
                    <h5><span class="bi bi-code-square me-2"></span>Functions</h5>
                </Header>
                <Body>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Type</th>
                                <th>Operation</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if(workflow.Functions != null)
                            {
                                @foreach (var function in workflow.Functions)
                                {
                                    <ExpandableDataRow>
                                        <Header>
                                            <td>@function.Name</td>
                                            <td><span class="badge bg-secondary">@EnumHelper.Stringify(function.Type)</span></td>
                                            <td class="text-break"><a href="@function.Operation" target="_blank">@function.Operation</a></td>
                                            <td>
                                                @if(!string.IsNullOrWhiteSpace(function.AuthRef))
                                                {
                                                    <span class="badge bg-primary text-white mx-1" title="The function call is secured by an authentication mechanism">secured</span>
                                                }
                                            </td>
                                            <td class="d-flex justify-content-end"><button @onclick="async () => await OnPropertyChangedAsync(nameof(Workflow.Functions), d => d.Functions?.Remove(function))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="bi bi-trash"></small></button></td>
                                        </Header>
                                        <Body>
                                            <td colspan="5">
                                                <FunctionEditor Function="@function" OnChange="OnFunctionEditorChanged" />
                                            </td>
                                        </Body>
                                    </ExpandableDataRow>
                                }
                            }
                        </tbody>
                    </table>
                    <button class="btn btn-block btn-warning text-white w-100" @onclick="OnCreateFunctionAsync">Create new function</button>
                </Body>
            </Expander>
        </div>

        <!-- Secrets -->
        <div class="border border-secondary rounded-2 p-3 mb-3">
            <Expander IsExpanded="@(State.ExpanderStates!["secrets"])" OnToggleExpand="@(isExpanded => OnToggleExpand("secrets", isExpanded))">
                <Header>
                    <h5><span class="bi bi-incognito me-2"></span>Secrets</h5>
                </Header>
                <Body>
                    <table class="table">
                        <tbody>
                            @if(workflow?.Secrets != null)
                            {
                                var index = -1;
                                foreach(var secret in Workflow.Secrets!)
                                {
                                    index++;
                                    <ExpandableDataRow>
                                        <Header>
                                            <td>@secret</td>
                                            <td class="d-flex justify-content-end"><button @onclick="async () => await OnPropertyChangedAsync(nameof(Workflow.Secrets), d => d.Secrets?.Remove(secret))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="bi bi-trash"></small></button></td>
                                        </Header>
                                        <Body>
                                            <td colspan="2">
                                                <table class="table table-striped">
                                                    <tbody>
                                                        <tr>
                                                            <td>Secret name</td>
                                                            <td><input type="text" value="@secret" required minlength="1" placeholder="Secret name" title="The name of the secret to import" class="form-control" 
                                                                @onchange="async e => await OnsecretChangedAsync(index, (string)e.Value!)"/></td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </td>
                                        </Body>
                                    </ExpandableDataRow>
                                }
                            }
                        </tbody>
                    </table>
                    <button class="btn btn-block btn-warning text-white w-100" @onclick="OnAddSecretAsync">Add secret</button>
                </Body>
            </Expander>
        </div>

        <!-- Authentication -->
        <div class="border border-secondary rounded-2 p-3 mb-3">
            <Expander IsExpanded="@State.ExpanderStates!["authentication"]" OnToggleExpand="@(isExpanded => OnToggleExpand("authentication", isExpanded))">
                <Header>
                    <h5><span class="bi bi-shield-lock me-2"></span>Authentication</h5>
                </Header>
                <Body>
                    <table class="table">
                         <thead>
                            <tr>
                                <th>Name</th>
                                <th>Scheme</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if(workflow?.Auth != null)
                            {
                                @foreach (var authentication in Workflow!.Auth!)
                                {
                                    <ExpandableDataRow>
                                        <Header>
                                            <td>@authentication.Name</td>
                                            <td><span class="badge bg-secondary">@EnumHelper.Stringify(authentication.Scheme)</span></td>
                                            <td class="d-flex justify-content-end"><button @onclick="async () => await OnPropertyChangedAsync(nameof(Workflow.Auth), d => d.Auth?.Remove(authentication))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="bi bi-trash"></small></button></td>
                                        </Header>
                                        <Body>
                                            <td colspan="3">
                                                <AuthenticationEditor Authentication="authentication" OnChange="async e => await OnPropertyChangedAsync(nameof(Workflow.Auth), _ => { })" />
                                            </td>
                                        </Body>
                                    </ExpandableDataRow>
                                }
                            }
                        </tbody>
                    </table>
                    <button class="btn btn-block btn-warning text-white w-100" @onclick="OnCreateAuthenticationAsync">Create new authentication</button>
                </Body>
            </Expander>
        </div>

        <!-- Annotations -->
        <div class="border border-secondary rounded-2 p-3 mb-3">
            <Expander IsExpanded="@State.ExpanderStates!["annotations"]" OnToggleExpand="@(isExpanded => OnToggleExpand("annotations", isExpanded))">
                <Header>
                    <h5><span class="bi bi-pencil me-2"></span>Annotations</h5>
                </Header>
                <Body>
                    <table class="table">
                        <tbody>
                            @if(workflow.Annotations != null)
                            {
                                var index = -1;
                                @foreach (var annotation in workflow.Annotations)
                                {
                                    index++;
                                    <ExpandableDataRow>
                                        <Header>
                                            <td>@annotation</td>
                                            <td class="d-flex justify-content-end"><button @onclick="async () => await OnPropertyChangedAsync(nameof(Workflow.Annotations), d => d.Annotations?.Remove(annotation))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="bi bi-trash"></small></button></td>
                                        </Header>
                                        <Body>
                                            <td colspan="2">
                                                <table class="table table-striped">
                                                    <tr>
                                                        <td>Annotation</td>
                                                        <td><input type="text" value="@annotation" placeholder="Annotation" title="An annotation to add to the workflow" class="form-control" 
                                                            @onchange="async e => await OnAnnotationChangedAsync(index, (string)e.Value!)"/></td>
                                                    </tr>
                                                </table>
                                            </td>
                                        </Body>
                                    </ExpandableDataRow>
                                }
                            }
                        </tbody>
                    </table>
                    <button class="btn btn-block btn-warning text-white w-100" @onclick="OnAddAnnotationAsync">Add annotation</button>
                </Body>
            </Expander>
        </div>

        <!-- Metadata -->
        <div class="border border-secondary rounded-2 p-3 mb-3">
            <Expander IsExpanded="@State.ExpanderStates!["metadata"]" OnToggleExpand="@(isExpanded => OnToggleExpand("metadata", isExpanded))">
                <Header>
                    <h5><span class="bi bi-puzzle me-2"></span>Metadata</h5>
                </Header>
                <Body>
                    <MetadataEditor 
                    Metadata="workflow.Metadata"
                    OnChange="async e => await OnPropertyChangedAsync(nameof(workflow.Metadata), w => w.Metadata = e)" />
                </Body>
            </Expander>
        </div>

    </CascadingValue>

}
else
{
     <Loader />
}

@code {

    private bool autoGenerateId = true;

    private WorkflowDefinition? workflow { get; set; }
    [Parameter] public WorkflowDefinition? Workflow { get; set; }
    [Parameter] public EventCallback<WorkflowDefinition> OnPropertyChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.workflow != this.Workflow) {
            this.workflow = this.Workflow;
        }
    }

    protected virtual void OnToggleExpand(string sectionName, bool isExpanded)
    {
        this.Dispatcher.Dispatch(new ToggleExpand(sectionName, isExpanded));
        this.StateHasChanged();
    }

    protected virtual async Task OnCreateStateAsync()
    {
        if (this.workflow == null)
            return;
        var state = new OperationStateDefinition()
        {
            Name = $"state-{workflow.States.Count + 1}",
            IsEnd = true
        };
        await this.OnPropertyChangedAsync(nameof(workflow.States), d => d.States.Add(state));
    }

    protected virtual async Task OnCreateEventAsync()
    {
        if (this.workflow == null)
            return;
        if (this.workflow.Events == null)
            this.workflow.Events = new();
        var e = new EventDefinition() { Name = $"event-{workflow.Events.Count + 1}" };
        await this.OnPropertyChangedAsync(nameof(workflow.Events), d =>
        {
            d.Events!.Add(e);
        });
    }

    protected virtual async Task OnCreateFunctionAsync()
    {
        if (this.workflow == null)
            return;
        if (this.workflow.Functions == null)
            this.workflow.Functions = new();
        var function = new FunctionDefinition() { Name = $"function-{workflow.Functions.Count + 1}" };
        await this.OnPropertyChangedAsync(nameof(workflow.Functions), d =>
        {
            d.Functions!.Add(function);
        });
    }

    protected virtual async Task OnAddSecretAsync()
    {
        if (this.Workflow == null)
            return;
        if (this.Workflow.Secrets == null)
            this.Workflow.Secrets = new();
        var secret = $"secret-{Workflow.Secrets.Count + 1}";
        await this.OnPropertyChangedAsync(nameof(Workflow.Secrets), d =>
        {
            d.Secrets!.Add(secret);
        });
    }

    protected virtual async Task OnsecretChangedAsync(int index, string secret)
    {
        if (this.Workflow == null || this.Workflow.Secrets == null)
            return;
        await this.OnPropertyChangedAsync(nameof(Workflow.Secrets), d =>
        {
            if (d.Secrets == null)
                d.Secrets = new();
            d.Secrets.RemoveAt(index);
            if(index >= d.Secrets.Count)
                index = d.Secrets.Count - 1;
            if (index < 0)
                index = 0;
            d.Secrets.Insert(index, secret);
        });
    }

    protected virtual async Task OnAddAnnotationAsync()
    {
        if (this.Workflow == null)
            return;
        if (this.Workflow.Annotations == null)
            this.Workflow.Annotations = new();
        var secret = $"annotation-{Workflow.Annotations.Count + 1}";
        await this.OnPropertyChangedAsync(nameof(Workflow.Annotations), d =>
        {
            d.Annotations!.Add(secret);
        });
    }

    protected virtual async Task OnAnnotationChangedAsync(int index, string annotation)
    {
        if (this.Workflow == null || this.Workflow.Annotations == null)
            return;
        await this.OnPropertyChangedAsync(nameof(Workflow.Annotations), d =>
        {
            if (d.Annotations == null)
                d.Annotations = new();
            d.Annotations.RemoveAt(index);
            if(index >= d.Annotations.Count)
                index = d.Annotations.Count - 1;
            if (index < 0)
                index = 0;
            d.Annotations.Insert(index, annotation);
        });
    }

    protected virtual async Task OnAddMetadataAsync()
    {
        if (this.Workflow == null)
            return;
        await this.OnPropertyChangedAsync(nameof(Workflow.Metadata), d =>
        {
            if (d.Metadata == null)
                d.Metadata = new();
            d.Metadata.Set("undefined", "undefined");
        });
    }

    protected virtual async Task OnMetadataPropertyNameChangedAsync(int index, string name)
    {
        if (this.Workflow == null || this.Workflow.Metadata == null)
            return;
        await this.OnPropertyChangedAsync(nameof(Workflow.Metadata), d =>
        {
            if (d.Metadata == null)
                d.Metadata = new();
            var obsolete = d.Metadata.DynamicProperties.ElementAt(index);
            d.Metadata.Remove(obsolete.Key);
            if (index >= d.Metadata.DynamicProperties.Count)
                index = d.Metadata.DynamicProperties.Count - 1;
            if (index < 0)
                index = 0;
            if (d.Metadata.DynamicProperties.Any())
                d.Metadata.Insert(index, name, obsolete.Value);
            else
                d.Metadata.Set(name, obsolete.Value);
        });
    }

    protected virtual async Task OnCreateAuthenticationAsync()
    {
        if (this.Workflow == null)
            return;
        if (this.Workflow.Auth == null)
            this.Workflow.Auth = new();
        var auth = new AuthenticationDefinition() { Name = $"authentication-{Workflow.Auth.Count + 1}", Scheme = AuthenticationScheme.Basic, Properties = new BasicAuthenticationProperties() };
        await this.OnPropertyChangedAsync(nameof(Workflow.Auth), d =>
        {
            d.Auth!.Add(auth);
        });
    }

    protected virtual async Task OnStatePropertyChangedAsync(StateDefinition state)
    {
        if (this.workflow == null)
            return;
        await this.OnPropertyChangedAsync(nameof(workflow.States));
    }

    protected virtual async Task OnAutoGenerateIdChanged(bool autoGenerate)
    {
        this.autoGenerateId = autoGenerate;
        if (this.autoGenerateId)
            await this.OnPropertyChangedAsync(nameof(workflow.Name), w => w.Id = w.Name.Slugify("-").ToLowerInvariant());
    }

    protected virtual async Task OnNameChangedAsync(string? name)
    {
        if (this.workflow == null)
            return;
        await this.OnPropertyChangedAsync(nameof(workflow.Name), w =>
        {
            w.Name = name;
            if (autoGenerateId && !string.IsNullOrWhiteSpace(name))
                w.Id = name.Slugify("-").ToLowerInvariant();
        });
    }

    protected virtual async Task OnFunctionEditorChanged(FunctionDefinition? functionDefinition) {
        await this.OnPropertyChangedAsync(nameof(workflow.Functions));
    }

    protected virtual async Task OnEventEditorChanged(EventDefinition? eventDefinition)
    {
        await this.OnPropertyChangedAsync(nameof(workflow.Events));
    }

    protected virtual async Task OnPropertyChangedAsync(string property, Action<WorkflowDefinition>? patchAction = null)
    {
        if (this.workflow == null)
            return;
        if (patchAction != null)
            patchAction(this.workflow);
        await this.OnPropertyChanged.InvokeAsync(this.workflow);
    }

}
