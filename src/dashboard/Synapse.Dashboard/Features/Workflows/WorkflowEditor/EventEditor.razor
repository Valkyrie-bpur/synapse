@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard

@if(evt != null)
{
    <table class="table table-striped">
    <tbody>
        <tr>
            <td>Name</td>
            <td><input name="@nameof(evt.Name)" type="text" required placeholder="Event name" class="form-control" value="@evt.Name"
                @onchange="async e => await OnPropertyChanged(nameof(evt.Name), ed => ed.Name = (string)e.Value!)" /></td>
        </tr>
        <tr>
            <td>Kind</td>
            <td>
                    <select name="@nameof(evt.Kind)" required class="form-select bg-secondary text-white"
                        @onchange="async e => await OnPropertyChanged(nameof(evt.Kind), ed => { ed.Kind = EnumHelper.Parse<EventKind>((string)e.Value!); })">
                    @foreach (EventKind eventKind in Enum.GetValues(typeof(EventKind)))
                    {
                        var eventKindStr = @EnumHelper.Stringify(eventKind);
                        <option value="@eventKindStr" selected="@(evt.Kind == eventKind)">@eventKindStr</option>
                    }
                </select>
           </td>
        </tr>
        <tr>
            <td>Source</td>
            <td><input name="@nameof(evt.Source)" type="url" placeholder="Cloud event source" title="The source attribute of the cloud event to match. Supports regular expressions." class="form-control" value="@evt.Source"
                @onchange="async e => await OnPropertyChanged(nameof(evt.Source), ed => ed.Source = (string)e.Value!)" /></td>
        </tr>
        <tr>
            <td>Type</td>
            <td><input name="@nameof(evt.Type)" type="text" placeholder="Cloud event type" title="The type attribute of the cloud event to match. Supports regular expressions." class="form-control" value="@evt.Type"
                @onchange="async e => await OnPropertyChanged(nameof(evt.Type), ed => ed.Type = (string)e.Value!)" /></td>
        </tr>
        <tr>
            <td colspan="2">Correlations</td>
        </tr>
        <tr>
            <td colspan="2">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Attribute name</th>
                            <th>Attribute value</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if(evt.Correlations != null)
                        {
                            foreach(var correl in evt.Correlations)
                            {
                                <ExpandableDataRow>
                                    <Header>
                                        <td>@correl.ContextAttributeName</td>
                                        <td>@correl.ContextAttributeValue</td>
                                    </Header>
                                    <Body>
                                        <td colspan="2">
                                            <table class="table table-striped">
                                                <tbody>
                                                    <tr>
                                                        <td>Attribute name</td>
                                                        <td><input type="text" value="@correl.ContextAttributeName" required placeholder="Cloud event context attribute name" title="The name of the context attribute used to correlate cloud events. Supports regular expressions." class="form-control"
                                                            @onchange="async e => await OnPropertyChanged(nameof(evt.Correlations), ed => correl.ContextAttributeName = (string)e.Value!)"/></td>
                                                    </tr>
                                                    <tr>
                                                        <td>Attribute value</td>
                                                        <td><input type="text" value="@correl.ContextAttributeValue" placeholder="Cloud event context attribute value" title="The value of the context attribute used to correlate cloud events. Supports runtime expressions" class="form-control"
                                                            @onchange="async e => await OnPropertyChanged(nameof(evt.Correlations), ed => correl.ContextAttributeValue = (string)e.Value!)"/></td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </td>
                                    </Body>
                                </ExpandableDataRow>
                            }
                        }
                    </tbody>
                </table>
                <button class="btn btn-block btn-primary text-white w-100" @onclick="@(async () => await OnPropertyChanged(nameof(evt.Correlations), ed => { if(ed.Correlations == null) ed.Correlations = new(); ed.Correlations.Add(new() { ContextAttributeName = "undefined" }); }))">Add new correlation</button>
            </td>
        </tr>
    </tbody>
</table>
}

@code {

    private EventDefinition? evt { get; set; }
    [Parameter] public EventDefinition? Event { get; set; }

    [Parameter] public EventCallback<EventDefinition?> OnChange { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.Event != this.evt) 
            this.evt = this.Event;
    }

    protected virtual async Task OnPropertyChanged(string property, Action<EventDefinition> patch)
    {
        if (this.evt == null)
            return;
        patch(this.evt);
        await this.OnChange.InvokeAsync(this.evt);
        this.StateHasChanged();
    }

}
