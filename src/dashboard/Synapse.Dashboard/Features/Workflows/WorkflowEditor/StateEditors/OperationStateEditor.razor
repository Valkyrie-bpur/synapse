@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard

@if(state != null)
{
    <table class="table table-striped">
        <tbody>
            <tr>
                <td>Execution mode</td>
                <td>
                    <select required title="The mode in which the state's operations are to be executed" class="form-select bg-secondary text-white"
                    @onchange="async e => await OnChangedAsync(s => s.ActionMode = EnumHelper.Parse<ActionExecutionMode>((string)e.Value!))">
                        @foreach(var mode in Enum.GetValues<ActionExecutionMode>())
                        {
                            var modeStr = @EnumHelper.Stringify(mode);
                            <option value="@modeStr" selected="@(state.ActionMode == mode)">@modeStr</option> 
                        }
                    </select>
                </td>
            </tr>
            <ExpandableDataRow>
                <Header>
                    <td colspan="2"><h6>Actions</h6></td>
                </Header>
                <Body>
                    <td colspan="2">
                    <ActionCollectionEditor Actions="state.Actions" OnChange="OnChange" />
                </td>
                </Body>
            </ExpandableDataRow>
        </tbody>
    </table>
}

@code {
    private OperationStateDefinition? state = null;
    [Parameter] public OperationStateDefinition? State { get; set; }

    [Parameter] public EventCallback OnChange { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.state != this.State)
            this.state = this.State;
    }

    protected virtual async Task OnChangedAsync(Action<OperationStateDefinition> patch)
    {
        if (this.state == null)
            return;
        patch(this.state);
        await this.OnChange.InvokeAsync();
        this.StateHasChanged();
    }

}
