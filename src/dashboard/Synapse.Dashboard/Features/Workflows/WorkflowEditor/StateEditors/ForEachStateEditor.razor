@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard

@if(state != null)
{
    <table class="table table-striped">
        <tbody>
            <tr>
                <td>Input collection</td>
                <td>
                    <JqExpressionEditor
                        Expression="@state?.InputCollection"
                        placeholder="${ . }"
                        title="A runtime expression used to select the elements to enumerate"
                        class="form-control"
                        OnChange="async e => await OnChangedAsync(s => s.InputCollection = e)"
                    />
                </td>
            </tr>
            <tr>
                <td>Output collection</td>
                <td>
                    <JqExpressionEditor
                        Expression="@state?.OutputCollection"
                        placeholder="${ . }"
                        title="A runtime expression used to select within the state data the array to output the iteration results to"
                        class="form-control"
                        OnChange="async e => await OnChangedAsync(s => s.OutputCollection = e)"
                    />
                </td>
            </tr>
            <tr>
                <td>Iteration parameter</td>
                <td>
                    <input type="text" value="@state?.IterationParameter" placeholder="elem" title="The name of the iteration parameter that can be referenced in child actions" class="form-control"
                    @onchange="async e => await OnChangedAsync(s => s.IterationParameter = (string)e.Value!)"/>
                </td>
            </tr>
            <tr>
                <td>Batch size</td>
                <td>
                    <input type="number" min="1" step="1" value="@state?.BatchSize" placeholder="1" title="Specifies the upper bound of how many iteration may run in parallel" class="form-control"
                    @onchange="async e => await OnChangedAsync(s => s.BatchSize = int.Parse((string)e.Value!))"/>
                </td>
            </tr>
            <tr>
                <td>Action execution mode</td>
                <td>
                    <select required title="The way actions should be executed when the trigger fires" class="form-select bg-secondary text-white"
                    @onchange="async e => await OnChangedAsync(s => s.Mode = EnumHelper.Parse<ActionExecutionMode>((string)e.Value!))">
                        @foreach (var mode in Enum.GetValues<ActionExecutionMode>())
                        {
                            var modeStr = EnumHelper.Stringify(mode);
                            <option value="@modeStr" selected="@(state!.Mode == mode)">@modeStr</option>
                        }
                    </select>
                </td>
            </tr>
            <ExpandableDataRow>
                <Header>
                    <td colspan="2"><h6>Actions</h6></td>
                </Header>
                <Body>
                    <td colspan="2">
                        <ActionCollectionEditor 
                        Actions="state!.Actions"
                        OnChange="async e => await OnChangedAsync(_ => {})" />
                    </td>
                </Body>
            </ExpandableDataRow>
        </tbody>
    </table>
}

@code {

    private ForEachStateDefinition? state = null;
    [Parameter] public ForEachStateDefinition? State { get; set; }

    [Parameter] public EventCallback OnChange { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.state != this.State)
            this.state = this.State;
    }

    protected virtual async Task OnChangedAsync(Action<ForEachStateDefinition> patch)
    {
        if (this.state == null)
            return;
        patch(this.state);
        await this.OnChange.InvokeAsync(this.state);
        this.StateHasChanged();
    }

}
