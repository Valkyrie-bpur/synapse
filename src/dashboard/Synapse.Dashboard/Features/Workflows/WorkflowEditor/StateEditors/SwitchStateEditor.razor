@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard

@if(this.state != null)
{
    <table class="table table-striped">
        <tbody>
             <tr>
                <td>Type</td>
                <td>
                    <select class="form-select bg-secondary text-white"
                    @onchange="async e => await OnSwitchStateTypeChangedAsync(EnumHelper.Parse<SwitchStateType>((string)e.Value!))">
                        @foreach(var type in Enum.GetValues<StateType>().OrderBy(v => v.ToString()))
                        {
                            var typeStr = @EnumHelper.Stringify(type);
                            if (state.Type == type)
                            {
                                <option value="@typeStr" selected>@typeStr</option>
                            }
                            else
                            {
                                <option value="@typeStr">@typeStr</option>
                            }
                        }
                    </select>
                </td>
            </tr>
             <ExpandableDataRow>
                    <Header><td colspan="2"><h6>Cases</h6></td></Header>
                    <Body>
                        <td colspan="2">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Condition</th>
                                        <th>Outcome</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @switch(state.SwitchType)
                                    {
                                        case SwitchStateType.Data:
                                            if(state.DataConditions != null)
                                            {
                                                foreach (var dataCase in state.DataConditions)
                                                {
                                                    <ExpandableDataRow>
                                                        <Header>
                                                            <td>@dataCase.Name</td>
                                                            <td>@dataCase.Condition</td>
                                                            <td><span class="badge bg-secondary text-white">@dataCase.GetOutcome().ToString()</span></td>
                                                            <td class="d-flex justify-content-end"><button @onclick="async () => await OnChangeAsync(s => s.DataConditions?.Remove(dataCase))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="bi bi-trash"></small></button></td>
                                                        </Header>
                                                        <Body>
                                                             <td colspan="4">
                                                                <DataCaseEditor
                                                                State="state"
                                                                DataCase="dataCase"
                                                                OnChange="async e => await OnChangeAsync(_ => {})" />
                                                            </td>
                                                        </Body>
                                                    </ExpandableDataRow>
                                                }
                                            }

                                            break;
                                        case SwitchStateType.Event:
                                            if(state.EventConditions != null)
                                            {
                                                foreach (var eventCase in state.EventConditions)
                                                {
                                                    <ExpandableDataRow>
                                                        <Header>
                                                            <td>@eventCase.Name</td>
                                                            <td>@eventCase.Event</td>
                                                            <td><span class="badge bg-secondary text-white">@eventCase.GetOutcome().ToString()</span></td>
                                                            <td class="d-flex justify-content-end"><button @onclick="async () => await OnChangeAsync(s => s.EventConditions?.Remove(eventCase))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="bi bi-trash"></small></button></td>
                                                        </Header>
                                                        <Body>
                                                             <td colspan="4">
                                                                <EventCaseEditor
                                                                State="state"
                                                                EventCase="eventCase"
                                                                OnChange="async e => await OnChangeAsync()" />
                                                            </td>
                                                        </Body>
                                                    </ExpandableDataRow>
                                                }
                                            }
                                            break;
                                        default:
                                            throw new NotSupportedException($"The specified {nameof(state.SwitchType)} '{state.SwitchType}' is not supported");
                                    }
                                </tbody>
                            </table>
                            <button class="btn btn-block btn-primary text-white w-100" @onclick="OnCreateCaseAsync">Create case</button>
                        </td>
                    </Body>
                </ExpandableDataRow>
                <ExpandableDataRow>
                    <Header><td colspan="2"><h6>Default case</h6></td></Header>
                    <Body>
                        <td colspan="2">
                            <DefaultCaseEditor
                            State="state"
                            DataCase="state.DefaultCondition"
                            OnChange="async c => await OnChangeAsync(s => s.DefaultCondition = c)" />
                        </td>
                    </Body>
                </ExpandableDataRow>
        </tbody>
    </table>
}

@code {

    private SwitchStateDefinition? state = null;
    [Parameter] public SwitchStateDefinition? State { get; set; }

    [Parameter] public EventCallback OnChange { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.state != this.State) {
            this.state = this.State;
            if (this.state == null)
                return;
            await this.OnChangeAsync(state =>
            {
                if (state.DataConditions == null && state.EventConditions == null)
                    state.DataConditions = new() { new() { Name = "case-1" } };
                if(state.DefaultCondition == null)
                    state.DefaultCondition = new();
            });
        }
    }

    protected virtual async Task OnSwitchStateTypeChangedAsync(SwitchStateType type)
    {
         if (this.state == null)
            return;
        Action<SwitchStateDefinition> patch;
        switch (this.state.SwitchType)
        {
            case SwitchStateType.Data:
                patch = state =>
                {
                    if (state.DataConditions == null)
                        state.DataConditions = new();
                    state.EventConditions = null;
                    state.EventTimeout = null;
                };
                break;
            case SwitchStateType.Event:
                patch = state =>
               {
                   if (state.EventConditions == null)
                       state.EventConditions = new();
                   state.DataConditions = null;
               };
                break;
            default:
                throw new NotSupportedException($"The specified {nameof(state.SwitchType)} '{state.SwitchType}' is not supported");
        }
        await this.OnChangeAsync(patch);
    }

    protected virtual async Task OnCreateCaseAsync()
    {
        if (this.state == null)
            return;
        Action<SwitchStateDefinition> patch;
        switch (this.state.SwitchType)
        {
            case SwitchStateType.Data:
                patch = state =>
                {
                    if (state.DataConditions == null)
                        state.DataConditions = new();
                    state.EventConditions = null;
                    state.EventTimeout = null;
                    state.DataConditions.Add(new() { Name = $"case-{(state.DataConditions.Count + 1)}" });
                };
                break;
            case SwitchStateType.Event:
                patch = state =>
               {
                   if (state.EventConditions == null)
                       state.EventConditions = new();
                   state.DataConditions = null;
                   state.EventConditions.Add(new() { Name = $"case-{(state.EventConditions.Count + 1)}" });
               };
                break;
            default:
                throw new NotSupportedException($"The specified {nameof(state.SwitchType)} '{state.SwitchType}' is not supported");
        }
        await this.OnChangeAsync(patch);
    }

    protected virtual async Task OnChangeAsync(Action<SwitchStateDefinition>? patch = null)
    {
        if (this.state == null)
            return;
        if (patch != null)
            patch(this.state);
        await this.OnChange.InvokeAsync();
        this.StateHasChanged();
    }

}
