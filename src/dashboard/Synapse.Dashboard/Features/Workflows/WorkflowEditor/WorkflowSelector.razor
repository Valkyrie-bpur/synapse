@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard
@using Semver
@inherits StatefulComponent<V1WorkflowCollectionState>

@if(workflowsByDefinitionId != null)
{
    <div class="input-group">
        <select value="@selectedId" class="form-select"
        @onchange="async e => await OnIdChangedAsync((string)e.Value!)">
            <option disabled selected="@(string.IsNullOrWhiteSpace(selectedId))" value> -- select a workflow -- </option>
            @foreach(var workflowGroup in workflowsByDefinitionId)
            {
                <option value="@workflowGroup.Key" title="@workflowGroup.Value.First().Definition.Description" selected="@(workflowGroup.Key == selectedId)">@workflowGroup.Key</option>
            }
        </select>
        <select value="@selectedVersion" class="form-select"
        @onchange="async e => await OnVersionChangedAsync((string)e.Value!)">
            <option value="latest" selected="@(string.IsNullOrWhiteSpace(selectedVersion) || selectedVersion == "latest")" title="The latest version">latest</option>
            @if(!string.IsNullOrWhiteSpace(selectedId))
            {
                foreach(var workflow in workflowsByDefinitionId.First(g => g.Key == selectedId).Value)
                {
                    <option value="@workflow.Definition.Version" title="@workflow.Definition.Id @workflow.Definition.Version" selected="@(workflow.Definition.Version == selectedVersion)">@workflow.Definition.Version</option>
                }
            }
        </select>
    </div>
}
else
{
    <Loader />
}

@code {

    private string? selectedId;
    [Parameter] public string? SelectedId { get; set; }

    private string? selectedVersion;
    [Parameter] public string? SelectedVersion { get; set; } = "latest";

    [Parameter] public EventCallback<V1WorkflowReference> OnChange { get; set; }

    private IDisposable? subscription;
    private V1Workflow? selected;
    private IDictionary<string, List<V1Workflow>>? workflowsByDefinitionId;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.subscription = this.Feature
            .Subscribe(workflows =>
            {
                this.workflowsByDefinitionId = workflows
                    .GroupBy(w => w.Definition.Id!)
                    .OrderBy(w => w.Key)
                    .ToDictionary(g => g.Key, g => g.OrderByDescending(w => SemVersion.Parse(w.Definition.Version, SemVersionStyles.Any)).ToList());
                this.StateHasChanged();
            });
        this.Dispatcher.Dispatch(new ListV1Workflows());
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        var updated = false;
        if (this.selectedId != this.SelectedId)
        {
            this.selectedId = this.SelectedId;
            updated = true;
        }
        if (this.selectedVersion != this.SelectedVersion)
        {
            this.selectedVersion = this.SelectedVersion;
            updated = true;
        }
        if (!updated)
            return;
        this.UpdateSelectionState();
    }

    protected virtual void UpdateSelectionState()
    {
        if (this.workflowsByDefinitionId == null)
            return;
        var workflowVersions = this.workflowsByDefinitionId.FirstOrDefault(g => g.Key == this.selectedId);
        if (string.IsNullOrWhiteSpace(this.selectedVersion) || this.selectedVersion == "latest")
            this.selected = workflowVersions.Value?.First();
        else
            this.selected = workflowVersions.Value?.First(w => w.Definition.Version == this.selectedVersion);
        this.StateHasChanged();
    }

    protected virtual async Task OnIdChangedAsync(string? id)
    {
        this.selectedId = id;
        this.selectedVersion = "latest";
        this.UpdateSelectionState();
        await this.OnChange.InvokeAsync(new(this.selectedId!, this.selectedVersion));
        this.StateHasChanged();
    }

    protected virtual async Task OnVersionChangedAsync(string? version)
    {
        this.selectedVersion = version;
        this.UpdateSelectionState();
        await this.OnChange.InvokeAsync(new(this.selectedId!, this.selectedVersion!));
        this.StateHasChanged();
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        if (disposing)
            this.subscription?.Dispose();
    }

}
