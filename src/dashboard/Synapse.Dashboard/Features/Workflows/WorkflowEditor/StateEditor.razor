@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard

<div>

    <!-- Common properties -->
    <table class="table table-striped">
        <tbody>

            <!-- General -->
            <ExpandableDataRow IsExpanded="true">
                <Header>
                    <td colspan="2"><h6>General</h6></td>
                </Header>
                <Body>
                    <td colspan="3">
                        <table class="table table-striped">
                            <tbody>
                                <tr>
                                    <td>Name</td>
                                    <td>
                                        <input name="name" type="text" placeholder="Name" required class="form-control" value="@state.Name"
                                               @onchange="async e => await OnPropertyChangedAsync(nameof(state.Name), this.PatchStateName(e))" />
                                    </td>
                                </tr>
                                <tr>
                                    <td>Type</td>
                                    <td>
                                        <select class="form-select bg-secondary text-white"
                                        @onchange="async e => await OnStateTypeChangedAsync(EnumHelper.Parse<StateType>((string)e.Value!))">
                                            @foreach(var type in Enum.GetValues<StateType>().OrderBy(v => v.ToString()))
                                            {
                                                var typeStr = @EnumHelper.Stringify(type);
                                                if (state.Type == type)
                                                {
                                                    <option value="@typeStr" selected>@typeStr</option>
                                                }
                                                else
                                                {
                                                    <option value="@typeStr">@typeStr</option>
                                                }
                                            }
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td>Data input schema</td>
                                    <td>
                                        <input name="name" type="url" placeholder="Data input schema uri" class="form-control" value="@state.DataInputSchemaUri" />
                                    </td>
                                </tr>
                                <tr>
                                    <td>Compensated by</td>
                                    <td>
                                        <StateSelector Disabled="@state.UsedForCompensation"
                                        States="Workflow.States.Where(s => s.UsedForCompensation).ToList()"
                                        Selected="compensatedBy"
                                        ControlFlow="ControlFlow.Compensation"
                                        OnChange="OnCompensatedBySelectionChangedAsync" /></td>
                                </tr>
                                <tr>
                                    <td>Used for compensation</td>
                                    <td><input type="checkbox" placeholder="0.1.0" required value="@state.UsedForCompensation" checked="@state.UsedForCompensation" @onchange="async e => await OnPropertyChangedAsync(nameof(state.UsedForCompensation), d => { d.UsedForCompensation = (bool)e.Value!; d.CompensatedBy = null; })" class="form-check-input" /></td>
                                </tr>
                            </tbody>
                        </table>
                    </td>
                </Body>
            </ExpandableDataRow>
            
            <!-- Data filter-->
            <ExpandableDataRow>
                <Header>
                    <td colspan="2"><h6>Data filter</h6></td>
                </Header>
                <Body>
                    <td colspan="3">
                        <StateDataFilterEditor 
                            DataFilter="state.DataFilter"
                            OnChange="async e => await OnPropertyChangedAsync(nameof(state.DataFilter), s => s.DataFilter = e)"/>
                    </td>
                </Body>
            </ExpandableDataRow>
            
            <!-- Outcome-->
            <ExpandableDataRow>
                <Header>
                    <td colspan="2"><h6>Outcome</h6></td>
                </Header>
                <Body>
                    <td colspan="3">
                        <OutcomeEditor 
                        Outcome="@(state.GetOutcome())" 
                        ControlFlow="state.UsedForCompensation ? ControlFlow.Compensation : ControlFlow.Default"
                        ForbiddenTransitions="new List<StateDefinition>(Workflow.States.Where(s => s.UsedForCompensation != state.UsedForCompensation)) { state }" 
                        OnChange="async outcome => await this.OnPropertyChangedAsync(nameof(outcome.Type), d => state.SetOutcome(outcome))" />
                    </td>
                </Body>
            </ExpandableDataRow>
            
            <!-- Metadata -->
            <ExpandableDataRow>
                <Header>
                    <td colspan="2"><h6>Metadata</h6></td>
                </Header>
                <Body>
                    <td colspan="3">
                        <MetadataEditor 
                        Metadata="state.Metadata" 
                        OnChange="async metadata => await this.OnPropertyChangedAsync(nameof(state.Metadata), d => state.Metadata = metadata)" />
                    </td>
                </Body>
            </ExpandableDataRow>

            <!-- Specialized properties -->
            <ExpandableDataRow>
                <Header>
                    <td colspan="2"><h6>@state.Type.ToString()</h6></td>
                </Header>
                <Body>
                    <td colspan="3">
                        @switch (state)
                        {
                            case CallbackStateDefinition callbackState:
                                <CallbackStateEditor State="callbackState" OnChange="OnChange" />
                                break;
                            case EventStateDefinition eventState:
                                <EventStateEditor State="eventState" OnChange="OnChange" />
                                break;
                            case ForEachStateDefinition forEachState:
                                <ForEachStateEditor State="forEachState" OnChange="OnChange" />
                                break;
                            case InjectStateDefinition injectState:
                                <InjectStateEditor State="injectState" OnChange="OnChange" />
                                break;
                            case OperationStateDefinition operationState:
                                <OperationStateEditor State="operationState" OnChange="OnChange" />
                                break;
                            case ParallelStateDefinition parallelState:
                                <ParallelStateEditor State="parallelState" OnChange="OnChange" />
                                break;
                            case SleepStateDefinition sleepState:
                                <SleepStateEditor State="sleepState" OnChange="OnChange" />
                                break;
                            case SwitchStateDefinition switchState:
                                <SwitchStateEditor State="switchState" OnChange="OnChange" />
                                break;
                        }
                    </td>
                </Body>
            </ExpandableDataRow>

        </tbody>
    </table>
</div>

@code {

    [CascadingParameter] public WorkflowDefinition Workflow { get; set; } = null!;

    private StateDefinition state { get; set; } = null!;
    [Parameter] public StateDefinition State { get; set; } = null!;

    [Parameter] public EventCallback OnChange { get; set; }

    private StateDefinition? compensatedBy;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.state != this.State) {
            this.state = this.State;
            if (this.state?.CompensatedBy != null && this.compensatedBy?.Name != this.state.CompensatedBy)
                this.compensatedBy = this.Workflow.GetState(this.state.CompensatedBy);
        }
    }

    protected virtual Action<StateDefinition> PatchStateName(ChangeEventArgs e) {
        return (StateDefinition state) => {
            var previousName = state.Name;
            state.Name = (string)e.Value!;
            if (this.Workflow.StartStateName == previousName) {
                this.Workflow.StartStateName = state.Name;
            }
            this.Workflow.States.ForEach(s =>
            {
                if (!state.UsedForCompensation) {
                    if (s.TransitionToStateName == previousName) {
                        s.TransitionToStateName = state.Name;
                    }
                }
                else if (s.CompensatedBy == previousName) {
                    s.CompensatedBy = state.Name;
                }
                // todo: update conditions when errors/timeout are implemented
            });
        };
    }

    protected virtual async Task OnStateTypeChangedAsync(StateType stateType)
    {
        var stateIndex = this.Workflow.States.IndexOf(this.state);
        if (this.Workflow.States.Remove(this.state))
        {
            if (stateIndex > this.Workflow.States.Count)
                stateIndex = this.Workflow.States.Count;
        }
        else
        {
            stateIndex = this.Workflow.States.Count;
        }
        if (stateIndex < 0)
            stateIndex = 0;
        this.state = this.state.OfType(stateType);
        this.Workflow.States.Insert(stateIndex, this.state);
        await this.OnPropertyChangedAsync(nameof(state.Type), _ => { });
    }

    protected virtual async Task OnCompensatedBySelectionChangedAsync(StateDefinition? state)
    {
        if (this.state == null)
            return;
        if(state == null)
        {
            this.state.CompensatedBy = null;
            this.compensatedBy = null;
            return;
        }
        this.compensatedBy = state;
        await this.OnPropertyChangedAsync(nameof(state.CompensatedBy), s =>
        {
            s.CompensatedBy = state.Name;
        });
    }

    protected virtual async Task OnPropertyChangedAsync(string property, Action<StateDefinition> patchAction)
    {
        patchAction(this.state);
        await this.OnChange.InvokeAsync();
    }

}
