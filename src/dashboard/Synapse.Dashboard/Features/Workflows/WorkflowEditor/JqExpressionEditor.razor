@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard
@inject IMonacoEditorHelper MonacoEditorHelper
@inject IYamlConverter YamlConverter
@inject IJSRuntime JsRuntime

<div class="position-relative">
    <input 
        type="text"
        value="@expression"
        @attributes="AdditionalAttributes"
        @onchange="(async e => await OnExpressionChangeAsync((string?)e.Value))"
    />
    <i class="bi bi-play-circle position-absolute play-icon" @onclick="ShowTestBenchAsync"></i>
</div>
<Modal @ref="testBenchDialog">
    <Title>Jq Expression tester</Title>
    <Body>
        <div class="row mb-3">
            <div class="col">
                <input type="text" @bind="@testExpression" placeholder="${ . }" class="form-control" />
            </div>
        </div>
        <div class="row mb-3">
            <div class="col">
                <p>Sample Input:</p>
                <PreferedLanguageSelector PreferedLanguageChange="ToggleLanguage" />
                <MonacoEditor
                    @ref="inputEditor"
                    Id="@inputEditorId"
                    CssClass="monaco-small"
                    ConstructionOptions='MonacoEditorHelper.GetStandaloneEditorConstructionOptions()'
                    OnDidInit="OnInputEditorDidInit"
                />
            </div>
            <div class="col">                
                <p>Output:</p>
                <PreferedLanguageSelector PreferedLanguageChange="ToggleLanguage" />
                <MonacoEditor
                    @ref="outputEditor"
                    Id="@outputEditorId"
                    CssClass="monaco-small"
                    ConstructionOptions='MonacoEditorHelper.GetStandaloneEditorConstructionOptions(null, true)'
                    OnDidInit="OnOutputEditorDidInit"
                />
            </div>
        </div>
        <div class="d-flex justify-content-center">
            <button type="button" class="btn btn-outline-dark" @onclick="ProcessExpressionAsync">Test</button>
            <button type="button" class="btn btn-outline-success" @onclick="SaveExpressionAsync">Save</button>
            <button type="button" class="btn btn-outline-danger" @onclick="HideTesBenchAsync">Cancel</button>
        </div>
    </Body>
</Modal>

@code {
    private string expression = "";
    [Parameter] public string? Expression { get; set; }
    private string sample = "";
    [Parameter] public string? Sample { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter] public EventCallback<string?> OnChange { get; set; }

    private Modal? testBenchDialog;
    private MonacoEditor inputEditor = null!;
    private MonacoEditor outputEditor = null!;
    private string uid = Guid.NewGuid().ToString();
    private string inputEditorId => "jq-editor-" + this.uid;
    private string outputEditorId => "jq-output-" + this.uid;
    private string testExpression = "";

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.Expression != null && this.expression != this.Expression)
        {
            this.expression = this.Expression;
        }
        if (this.Sample != null && this.sample != this.Sample)
        {
            this.sample = this.Sample;
        }
    }

    private async Task OnExpressionChangeAsync(string? expression)
    {
        this.expression = expression ?? "";
        await this.OnChange.InvokeAsync(expression);
    }

    private async Task ShowTestBenchAsync()
    {
        this.testExpression = this.expression;
        await this.testBenchDialog!.ShowAsync();
    }

    private async Task SetEditorsLanguageAsync()
    {
        var inputModel = await this.inputEditor!.GetModel();
        var outputModel = await this.outputEditor!.GetModel();
        await MonacoEditorBase.SetModelLanguage(inputModel, this.MonacoEditorHelper.PreferedLanguage);
        await MonacoEditorBase.SetModelLanguage(outputModel, this.MonacoEditorHelper.PreferedLanguage);
    }

    private async Task ToggleLanguage(string language)
    {
        string input = await this.inputEditor!.GetValue();
        string output = await this.outputEditor!.GetValue();
        try
        {
            if (language == PreferedLanguage.YAML) {
                input = await this.YamlConverter.JsonToYaml(input);
                output = await this.YamlConverter.JsonToYaml(output);
            }
            else
            {
                input = await this.YamlConverter.YamlToJson(input);
                output = await this.YamlConverter.YamlToJson(output);
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.ToString());
            input = await this.inputEditor!.GetValue();
            output = await this.outputEditor!.GetValue();
            await this.MonacoEditorHelper.ChangePreferedLanguage(language == PreferedLanguage.JSON ? PreferedLanguage.YAML : PreferedLanguage.JSON);
        }
        await this.SetEditorsLanguageAsync();
        await this.inputEditor!.SetValue(input);
        await this.outputEditor!.SetValue(output);
        this.StateHasChanged();
    }

    private async Task OnInputEditorDidInit(MonacoEditorBase editorBase)
    {
        await this.SetEditorsLanguageAsync();
        await this.inputEditor!.SetValue(this.sample);
    }

    private async Task OnOutputEditorDidInit(MonacoEditorBase editorBase)
    {
        await this.SetEditorsLanguageAsync();
    }

    private async Task ProcessExpressionAsync()
    {
        if (string.IsNullOrWhiteSpace(this.testExpression))
            return;
        var trimmedExpression = this.testExpression.TrimStart('$').TrimStart('{').TrimEnd('}').Trim();
        if (string.IsNullOrWhiteSpace(trimmedExpression))
            return;
        var json = await this.inputEditor.GetValue();
        if (this.MonacoEditorHelper.PreferedLanguage == PreferedLanguage.YAML)
        {
            json = await this.YamlConverter.YamlToJson(json);
        }
        try
        {
            var output = await this.JsRuntime.InvokeAsync<string>("jq.raw", json, trimmedExpression);
            if (this.MonacoEditorHelper.PreferedLanguage == PreferedLanguage.YAML)
            {
                output = await this.YamlConverter.JsonToYaml(output);
            }
            await this.outputEditor.SetValue(output);
        }
        catch
        {
            // todo: display error ?
        }
    }

    private async Task SaveExpressionAsync()
    {
        await this.OnExpressionChangeAsync(this.testExpression);
        await this.HideTesBenchAsync();
    }

    private async Task HideTesBenchAsync()
    {
        await this.testBenchDialog!.ToggleAsync();
    }


}
