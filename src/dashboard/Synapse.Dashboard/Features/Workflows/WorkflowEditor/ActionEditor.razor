@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard

@if (action != null)
{
    <table class="table table-striped">
        <tbody>

            <!-- General -->
             <ExpandableDataRow IsExpanded="true">
                <Header>
                    <td colspan="2"><h6>General</h6></td>
                </Header>
                <Body>
                    <td colspan="3">
                        <table class="table table-striped">
                            <tbody>
                                <tr>
                                    <td>Name</td>
                                    <td><input type="text" placeholder="Name" title="The action's name" required class="form-control" value="@action.Name" @onchange="async e => await OnPropertyChangedAsync(nameof(action.Name), a => a.Name = (string)e.Value!)" /></td>
                                </tr>
                                <tr>
                                    <td>Type</td>
                                    <td>
                                        <select class="form-select bg-secondary text-white" title="The type of the action to perform" required @onchange="async e => await OnActionTypeChangedAsync(EnumHelper.Parse<ActionType>((string)e.Value!))">
                                            <option value="@EnumHelper.Stringify(ActionType.Function)">@EnumHelper.Stringify(ActionType.Function)</option>
                                            <option value="@EnumHelper.Stringify(ActionType.Subflow)">@EnumHelper.Stringify(ActionType.Subflow)</option>
                                            <option value="@EnumHelper.Stringify(ActionType.Trigger)">@EnumHelper.Stringify(ActionType.Trigger)</option>
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td>Retry policy</td>
                                    <td>
                                        <select class="form-select" title="The retry policy associated to the action, if any">
                        
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td>Sleep</td>
                                    <td>
                    
                                    </td>
                                </tr>
                                <tr>
                                    <td>Condition</td>
                                    <td>
                                        <JqExpressionEditor
                                            Expression="action.Condition" 
                                            title="A runtime expression that determines whether or not to run the action"
                                            placeholder="${ . }"
                                            class="form-control"
                                            OnChange="async e => await OnPropertyChangedAsync(nameof(action.Condition), a => a.Condition = e)"
                                        />
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </td>
                </Body>
            </ExpandableDataRow>
            
            <!-- Data Filter -->
            <ExpandableDataRow>
                <Header>
                    <td colspan="2"><h6>Data filter</h6></td>
                </Header>
                <Body>
                    <td colspan="3">
                        <ActionDataFilterEditor 
                        DataFilter="action.ActionDataFilter"
                        OnChange="async e => await OnPropertyChangedAsync(nameof(action.ActionDataFilter), a => a.ActionDataFilter = e)"/>
                    </td>
                </Body>
            </ExpandableDataRow>
            
            <!-- Specialized properties -->
            @switch (action.Type)
            {
                case ActionType.Function:
                    <ExpandableDataRow IsExpanded="true">
                        <Header>
                            <td colspan="2"><h6>Function</h6></td>
                        </Header>
                        <Body>
                            <td colspan="3">
                                <table class="table table-striped">
                                    <tbody>
                                        <tr>
                                            <td>Function</td>
                                            <td>
                                                <FunctionSelector 
                                                Functions="Workflow.Functions"
                                                Selected="string.IsNullOrWhiteSpace(action.Function?.RefName) ? null : Workflow.GetFunction(action.Function.RefName)"
                                                OnChange="async e => await OnPropertyChangedAsync(nameof(action.Function), a => a.Function!.RefName = e.Name)" />
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Arguments</td>
                                            <td>
                                                <DynamicObjectEditor 
                                                Object="action.Function!.Arguments" 
                                                OnChange="async e => await this.OnPropertyChangedAsync(nameof(action.Function), a => a.Function!.Arguments = e)" />
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </td>
                        </Body>
                    </ExpandableDataRow>
                    break;
                case ActionType.Subflow:
                        <ExpandableDataRow IsExpanded="true">
                        <Header>
                            <td colspan="2"><h6>Subflow</h6></td>
                        </Header>
                        <Body>
                            <td colspan="3">
                                <table class="table table-striped">
                                    <tbody>
                                        <tr>
                                            <td>Workflow</td>
                                            <td>
                                                <WorkflowSelector 
                                                SelectedId="@action.Subflow?.WorkflowId"
                                                SelectedVersion="@action.Subflow?.Version"
                                                OnChange="OnSubflowChangedAsync"/>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Invocation mode</td>
                                            <td>
                                            <select value="@action.Subflow?.InvocationMode" title="Configures the subflow's invocation mode" class="form-select bg-secondary text-white"
                                                @onchange="async e => await OnPropertyChangedAsync(nameof(action.Subflow.InvocationMode), a => { if(a.Subflow == null) a.Subflow = new(); a.Subflow.InvocationMode = EnumHelper.Parse<InvocationMode>((string)e.Value!); })"> 
                                                    @foreach(var invocationMode in Enum.GetValues<InvocationMode>())
                                                    {
                                                        var invocationModeStr = EnumHelper.Stringify(invocationMode);
                                                        var currentInvocationMode = action.Subflow == null ? InvocationMode.Synchronous : action.Subflow.InvocationMode;
                                                        var title = currentInvocationMode switch
                                                        {
                                                            InvocationMode.Synchronous => "The workflow must wait for the subflow to execute",
                                                            InvocationMode.Asynchronous => "The workflow starts the subflow, does not wait for it to execute and resumes execution flow",
                                                            _ => throw new NotSupportedException($"The specified {nameof(InvocationMode)} '{currentInvocationMode}' is not supported")
                                                        };
                                                        <option value="@invocationModeStr" title="The workflow must wait for the subflow to execute" selected="@(invocationMode == currentInvocationMode)">@invocationModeStr</option>
                                                    }
                                                </select>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </td>
                        </Body>
                    </ExpandableDataRow>
                    break;
                case ActionType.Trigger:
                    <ExpandableDataRow IsExpanded="true">
                        <Header>
                            <td colspan="2"><h6>Trigger</h6></td>
                        </Header>
                        <Body>
                            <td colspan="3">
                                <table class="table table-striped">
                                    <tbody>
                                        <tr>
                                            <td>Produce event</td>
                                            <td>
                                                <EventSelector 
                                                    EventKind="EventKind.Produced"
                                                    Selected="string.IsNullOrWhiteSpace(action.Event?.ProduceEvent) ? null : Workflow.GetEvent(action.Event.ProduceEvent)"
                                                    Events="Workflow.Events?.Where(e => e.Kind == EventKind.Produced).ToList()"
                                                    OnChange="async e => await OnPropertyChangedAsync(nameof(action.Event.ProduceEvent), a => { if(a.Event == null) a.Event = new(); a.Event.ProduceEvent = e.Name; })"/>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Result event</td>
                                            <td>
                                                <EventSelector
                                                    EventKind="EventKind.Consumed"
                                                    Selected="string.IsNullOrWhiteSpace(action.Event?.ResultEvent) ? null : Workflow.GetEvent(action.Event.ResultEvent)"
                                                    Events="Workflow.Events?.Where(e => e.Kind == EventKind.Consumed).ToList()"
                                                    OnChange="async e => await OnPropertyChangedAsync(nameof(action.Event.ResultEvent), a => { if(a.Event == null) a.Event = new(); a.Event.ResultEvent = e.Name; })"/>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </td>
                        </Body>
                    </ExpandableDataRow>
                    break;
            }
        </tbody>
    </table>
}

@code {

    [CascadingParameter] public WorkflowDefinition Workflow { get; set; } = null!;

    private ActionDefinition? action;
    [Parameter] public ActionDefinition? Action { get; set; }

    [Parameter] public EventCallback<ActionDefinition?> OnChange { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.action != this.Action) {
            this.action = this.Action;
        }
    }

    protected virtual async Task OnActionTypeChangedAsync(ActionType actionType)
    {
        if (this.action == null)
            return;
        switch (actionType)
        {
            case ActionType.Function:
                this.action.Event = null;
                this.action.Subflow = null;
                this.action.Function = new();
                break;
            case ActionType.Subflow:
                this.action.Event = null;
                this.action.Function = null;
                this.action.Subflow = new();
                break;
            case ActionType.Trigger:
                this.action.Function = null;
                this.action.Subflow = null;
                this.action.Event = new();
                break;
        }
        await this.OnPropertyChangedAsync(nameof(action.Type), _ => { });
    }

    protected virtual async Task OnSubflowChangedAsync(V1WorkflowReference subflow)
    {
        await this.OnPropertyChangedAsync(nameof(action.Subflow), a =>
        {
            if (subflow == null)
            {
                a.Subflow = null;
                return;
            }
            if (a.Subflow == null)
                a.Subflow = new();
            a.Subflow.WorkflowId = subflow.Id;
            a.Subflow.Version = subflow.Version;
        });
    }

    protected virtual async Task OnPropertyChangedAsync(string property, Action<ActionDefinition> patchAction)
    {
        if (this.action == null)
            return;
        patchAction(this.action);
        await this.OnChange.InvokeAsync(this.action);
    }

}
