@*
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard
@using CloudNative.CloudEvents
@using CloudNative.CloudEvents.Http
@using Neuroglia.Serialization
@inherits ModalBase
@inject IMonacoEditorHelper MonacoEditorHelper
@inject IYamlConverter YamlConverter
@inject IJsonSerializer JsonSerializer
@inject HttpClient HttpClient;
@inject CloudEventFormatter CloudEventFormatter

<div class="modal fade @(Active ? "show d-block" : "d-none")" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered @modalSizeClass" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Publish new Cloud Event</h5>
                @if (ShowCloseIcon)
                {
                    <button type="button" class="close btn" data-dismiss="modal" aria-label="Close" @onclick="HideAsync">
                        <small class="bi bi-x-circle"></small>
                    </button>
                }
            </div>
            <div class="modal-body">
                <h6>Context attributes</h6>
                <table class="table table-striped mb-3">
                    <tbody>
                        <tr>
                            <td>Spec Version</td>
                            <td><input type="text" value="@cloudEvent?.SpecVersion" required @onchange="args => OnEventChanged(e => e.SpecVersion = args.Value == null ? e.Id = null : (string)args.Value!)" placeholder="Cloud Event Spec Version" title="The Cloud Event Spec version to use" class="form-control" /></td>
                        </tr>
                        <tr>
                            <td>Id</td>
                            <td><input type="text" value="@cloudEvent?.Id" required @onchange="args => OnEventChanged(e => e.Id = args.Value == null ? e.Id = null : (string)args.Value!)" placeholder="e8be1dab-0f23-484d-b3be-6603d0b83be0" title="The event's unique identifier" class="form-control" /></td>
                        </tr>
                        <tr>
                            <td>Source</td>
                            <td><input type="url" value="@cloudEvent?.Source" required @onchange="args => OnEventChanged(e => e.Source = args.Value == null ? e.Source = null : new Uri((string)args.Value!))" placeholder="https://myservice.com" title="The absolute uri of the Cloud Event's source" class="form-control" /></td>
                        </tr>
                        <tr>
                            <td>Type</td>
                            <td><input type="text" value="@cloudEvent?.Type" required @onchange="args => OnEventChanged(e => e.Type = (string)args.Value!)" placeholder="com.myservice/events/myevent" title="The Cloud Event's type, which should ideally be a reverse DNS" class="form-control" /></td>
                        </tr>
                        <tr>
                            <td>Subject</td>
                            <td><input type="text" value="@cloudEvent?.Subject" required @onchange="args => OnEventChanged(e => e.Subject = (string)args.Value!)" placeholder="e3fbf8f9-077a-4141-9f20-53aa924e11ed" title="The subject of the event in the context of the event producer" class="form-control" /></td>
                        </tr>
                        <tr>
                            <td>Data Schema</td>
                            <td><input type="url" value="@cloudEvent?.DataSchema" @onchange="args => OnEventChanged(e => e.DataSchema = string.IsNullOrWhiteSpace((string)args.Value!) ? null : new((string)args.Value))" placeholder="https://myservice.com/schemas/events/myevent.json" title="The Cloud Event's schema" class="form-control" /></td>
                        </tr>
                        <tr>
                            <td>Data Content Type</td>
                            <td><input type="text" value="@cloudEvent?.DataContentType" @onchange="args => OnEventChanged(e => e.DataContentType = (string)args.Value!)" placeholder="application/json" title="The Cloud Event's data content type" class="form-control" /></td>
                        </tr>
                    </tbody>
                </table>
                <h6>Extension attributes</h6>
                <table class="table table-striped mb-3">
                    <tbody>
                        @if (cloudEvent != null && cloudEvent.ExtensionAttributes != null)
                        {
                            foreach (var attr in cloudEvent.ExtensionAttributes)
                            {
                                <tr>
                                    <td>@attr.Key</td>
                                    <td><input type="text" value="@attr.Value?.ToObject()" @onchange="args => OnEventChanged(e => e.SetAttribute(attr.Key, (string)args.Value!))" title="The value of the cloud event's extension context attribute" class="form-control" /></td>
                                    <td><button title="Removes the extension context attribute" @onclick="e => OnRemoveExtensionAttribute(attr.Key)" class="btn btn-outline-dark"><span class="bi bi-trash-fill"></span></button></td>
                                </tr>
                            }
                        }
                        <tr>
                            <td><input type="text" value="@extensionAttribute.Name" @onchange="e => OnNewExtensionAttributeChanged(a => a.Name = (string)e.Value!)" placeholder="Name" class="form-control" /></td>
                            <td><input type="text" value="@extensionAttribute.Value" @onchange="e => OnNewExtensionAttributeChanged(a => a.Value = (string)e.Value!)" placeholder="Value" class="form-control" /></td>
                            <td><button title="Adds new extension context attribute" @onclick="OnAddExtensionAttribute" class="btn btn-secondary"><span class="bi bi-plus"></span></button></td>
                        </tr>
                    </tbody>
                </table>

                <h6>Payload</h6>
                <MonacoEditor @ref="payloadEditor"
                    CssClass="pxh-150"
                    ConstructionOptions="MonacoEditorHelper.GetStandaloneEditorConstructionOptions()"
                    OnDidInit="OnPayloadEditorInit"
                    OnDidChangeModelContent="OnPayloadChanged" />
            </div>
            <div class="modal-footer btn-group d-flex">
                <button title="Cancel" class="btn btn-secondary">Cancel</button>
                <button title=" Publishes the event" class="btn btn-primary" @onclick="OnPublishEvent">Publish</button>
            </div>
        </div>
    </div>
</div>

@if (Active)
{
    <div class="modal-backdrop fade show"></div>
}

@code{

    private MonacoEditor? payloadEditor;
    private ExtensionAttribute extensionAttribute = new();

    private V1Event? cloudEvent;
    [Parameter] public V1Event? CloudEvent{ get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if(this.cloudEvent != this.CloudEvent)
        {
            this.cloudEvent = this.CloudEvent;
            this.StateHasChanged();
        }
    }

    private async Task OnTogglePayloadEditorEditorLanguage(string language)
    {
        await this.SetPayloadEditorLanguageAsync();
    }

    private async Task SetPayloadEditorLanguageAsync()
    {
        var model = await this.payloadEditor!.GetModel();
        await MonacoEditorBase.SetModelLanguage(model, this.MonacoEditorHelper.PreferedLanguage);
    }

    private async Task OnPayloadEditorInit(MonacoEditorBase editor)
    {
        await this.SetPayloadEditorLanguageAsync();
        var text = "{ }";
        if (this.cloudEvent?.Data != null)
            text = await this.JsonSerializer.SerializeAsync(this.cloudEvent.Data);
        if (this.MonacoEditorHelper.PreferedLanguage == PreferedLanguage.YAML)
            text = await this.YamlConverter.JsonToYaml(text);
        await this.payloadEditor!.SetValue(text);
    }

    private async Task OnPayloadChanged(ModelContentChangedEvent e)
    {
        var rawPayload = await this.payloadEditor!.GetValue();
        if (this.MonacoEditorHelper.PreferedLanguage == PreferedLanguage.YAML)
            rawPayload = await this.YamlConverter.YamlToJson(rawPayload);
        var payload = await this.JsonSerializer.DeserializeAsync<Neuroglia.Serialization.Dynamic>(rawPayload);
        if (payload == null) payload = Neuroglia.Serialization.Dynamic.FromObject(new());
        this.OnEventChanged(evt => evt.Data = payload);
    }

    private void OnEventChanged(Action<V1Event> patch)
    {
        if (this.cloudEvent == null) this.cloudEvent = V1Event.Create();
        patch(this.cloudEvent);
    }

    private void OnRemoveExtensionAttribute(string name)
    {
        if (this.cloudEvent == null) return;
        this.cloudEvent.ExtensionAttributes.Remove(name);
        this.StateHasChanged();
    }

    private void OnAddExtensionAttribute()
    {
        if (this.cloudEvent == null) this.cloudEvent = V1Event.Create();
        Neuroglia.Serialization.Dynamic dynamic = (string.IsNullOrWhiteSpace(this.extensionAttribute.Value) ? null : Neuroglia.Serialization.Dynamic.FromObject(this.extensionAttribute.Value))!;
        if (this.cloudEvent.ExtensionAttributes == null) this.cloudEvent.ExtensionAttributes = new();
        this.cloudEvent.ExtensionAttributes[this.extensionAttribute.Name] = dynamic;
        this.extensionAttribute = new();
        this.StateHasChanged();
    }

    private void OnNewExtensionAttributeChanged(Action<ExtensionAttribute> patch)
    {
        patch(this.extensionAttribute);
        this.StateHasChanged();
    }

    private async Task OnPublishEvent()
    {
        if (this.cloudEvent == null) return;
        var cloudEvent = this.cloudEvent.ToCloudEvent();
        using var content = cloudEvent.ToHttpContent(ContentMode.Structured, this.CloudEventFormatter);
        using var request = new HttpRequestMessage(HttpMethod.Post, "/") { Content = content };
        using var response = await this.HttpClient.SendAsync(request);
        response.EnsureSuccessStatusCode();
        await this.HideAsync();
    }

    public record ExtensionAttribute
    {

        public string Name { get; set; }

        public string Value { get; set; }

    }

}