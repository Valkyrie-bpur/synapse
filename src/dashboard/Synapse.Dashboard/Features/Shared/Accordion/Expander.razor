@* 
    Copyright © 2022-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard
@implements IAccordionModel

<div class="@Class">
    <Dynamic Tag="@HeaderContainerTagName" Class="expander" OnClick="ToggleExpandAsync">
        @HeaderTemplate(this)
    </Dynamic>
    <Dynamic Tag="@BodyContainerTagName" Class="@GetBodyCssClass()">
        @Body
    </Dynamic>
</div>

@code
{

    [Parameter] public string HeaderContainerTagName { get; set; } = "div";

    [Parameter] public string BodyContainerTagName { get; set; } = "div";

    /// <summary>
    /// Gets the <see cref="Expander"/>'s header <see cref="RenderFragment"/>
    /// </summary>
    [Parameter] public RenderFragment Header { get; set; }

    /// <summary>
    /// Gets the <see cref="Expander"/>'s header template <see cref="RenderFragment"/>
    /// </summary>
    [Parameter] public RenderFragment<Expander> HeaderTemplate { get; set; } = context =>
    {
        return 
    @<div class="row align-items-center no-gutters @(context.IsExpanded ? "" : "border-bottom border-muted") pb-2">
        <div class="col-11">
            <div>
                @context.Header
            </div>
        </div>
        <div class="col-1">
            <span class="ml-2 text-secondary bi @(context.IsExpanded ? "bi-caret-up" : "bi-caret-down")"></span>
        </div>
        </div>
    ;
    };

    /// <summary>
    /// Gets the <see cref="Expander"/>'s body <see cref="RenderFragment"/>
    /// </summary>
    [Parameter] public RenderFragment Body { get; set; }

    /// <summary>
    /// Gets a boolean indicating whether or not the <see cref="Expander"/> is expanded
    /// </summary>
    [Parameter] public bool IsExpanded { get; set; }

    /// <summary>
    /// Gets the Expander's css classes
    /// </summary>
    [Parameter] public string? Class { get; set; }

    public bool AllowsMultiple { get; set; } = true;

    private string GetBodyCssClass()
    {
        return $"collapse expander-body {(IsExpanded ? "show" : "")}";
    }

    /// <summary>
    /// Gets the <see cref="EventCallback"/> to invoke whenever the <see cref="Expander"/> is being expanded or collapsed
    /// </summary>
    [Parameter] public EventCallback<bool> OnToggleExpand { get; set; }

    public async Task ToggleExpandAsync()
    {
        this.IsExpanded = !this.IsExpanded;
        //this.StateHasChanged();
        if (this.OnToggleExpand.HasDelegate) {
            await this.OnToggleExpand.InvokeAsync(this.IsExpanded);
        }
    }

}
