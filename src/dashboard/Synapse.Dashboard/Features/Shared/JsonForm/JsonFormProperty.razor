@* 
    Copyright © 2022-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@using Newtonsoft.Json.Schema
@namespace Synapse.Dashboard

@if(!string.IsNullOrWhiteSpace(Name) 
    && Schema != null)
{
    <div class="mb-3">
        @switch (Schema.Type)
        {
            case JSchemaType.Array:
                //todo
                break;
            case JSchemaType.Boolean:
                <div class="form-check">
                    <input name="@Name" class="form-check-input" type="checkbox" value="@Value" @onchange="OnInputValueChanged">
                    <label for="@Name" class="form-check-label">@displayName@RequiredPropertySuffix</label>
                </div>
                break;
            case JSchemaType.Integer:
                <label for="@Name" class="form-label">@displayName@RequiredPropertySuffix</label>
                <input name="@Name" title="@Schema.Description" placeholder="@displayName" min="@Schema.Minimum" max="@Schema.Maximum" multiple="@Schema.MultipleOf" required="@IsRequired" value="@Value" class="form-control" @onchange="OnInputValueChanged" />
                break;
            case JSchemaType.Number:
                <label for="@Name" class="form-label">@displayName@RequiredPropertySuffix</label>    
                <input name="@Name" title="@Schema.Description" placeholder="@displayName" min="@Schema.Minimum" max="@Schema.Maximum" multiple="@Schema.MultipleOf" required="@IsRequired" value="@Value" class="form-control" @onchange="OnInputValueChanged" />
                break;
            case JSchemaType.Object:
                <div class="card">
                    <div class="card-header">@displayName</div>
                    <div class="card-body">
                        <JsonForm Schema="@Schema" Value="@Value" OnValueChanged="OnInputValueChanged" />
                    </div>
                </div>
                break;
            case JSchemaType.String:
                <label for="@Name" class="form-label">@displayName@RequiredPropertySuffix</label>
                @if(Schema.Enum != null && Schema.Enum.Any())
                {
                    <select class="form-select" name="@Name" title="@Schema.Description" readonly="@Schema.ReadOnly" value="@Value" required="@IsRequired" @onchange="OnInputValueChanged">
                        @foreach (var option in Schema.Enum)
                        {
                            <option value="@option">@option</option>
                        }
                    </select>
                }
                else
                {
                    <input name="@Name" title="@Schema.Description" placeholder="@displayName" type="@Format" maxlength="@Schema.MaximumLength" pattern="@Schema.Pattern" required="@IsRequired" readonly="@Schema.ReadOnly" value="@Value" class="form-control" @onchange="OnInputValueChanged" />
                }
                break;
        }
    </div>
}

@code 
{

    [CascadingParameter] private JsonForm Form { get; set; }

    [Parameter] public string Name { get; set; }

    [Parameter] public JSchema Schema { get; set; }

    [Parameter] public object Value { get; set; }

    [Parameter] public bool IsRequired { get; set; }

    [Parameter] public EventCallback<ChangeEventArgs> OnValueChanged { get; set; }

    string RequiredPropertySuffix => this.IsRequired ? " *" : "";

    string Format => string.IsNullOrWhiteSpace(this.Schema.Format) ? "text" : this.Schema.Format;

    private string displayName => string.IsNullOrWhiteSpace(this.Schema.Title) ? this.Name : this.Schema.Title;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.Form.AddProperty(this);
    }

    private async Task OnInputValueChanged(ChangeEventArgs e)
    {
        this.Value = e.Value;
        await this.OnValueChanged.InvokeAsync(new() { Value = this.Value });
    }

}
