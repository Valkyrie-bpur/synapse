@*
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@page "/schedules/{scheduleId}"
@using System.Reactive.Subjects
@using System.Reactive.Linq
@inherits StatefulComponent<ScheduleViewState>
@inject IBreadcrumbManager BreadcrumbManager
@inject NavigationManager NavigationManager

<PageTitle>Schedules</PageTitle>

@if(schedule != null)
{

    <AppRightSidebar>
        <Toolbar>
            <button @onclick="OnViewScheduleList" class="btn btn-outline-dark" title="Back to list"><small class="bi bi-arrow-left"></small><span class="btn-label">&nbsp; Back to list</span></button>
            @if (schedule.Status == V1ScheduleStatus.Active)
            {
                <button @onclick="OnTriggerSchedule" class="btn btn-outline-dark" title="Trigger"><small class="bi bi-fire"></small><span class="btn-label">&nbsp; Trigger</span></button>
                <button @onclick="OnSuspendSchedule" class="btn btn-outline-dark" title="Suspend"><small class="bi bi-pause-fill"></small><span class="btn-label">&nbsp; Suspend</span></button>
            }
            @if(schedule.Status == V1ScheduleStatus.Suspended)
            {
                <button @onclick="OnResumeSchedule" class="btn btn-outline-dark" title="Resume"><small class="bi bi-play-fill"></small><span class="btn-label">&nbsp; Resume</span></button>
            }
            @if(schedule.Status <= V1ScheduleStatus.Suspended)
            {
                <button @onclick="OnRetireSchedule" class="btn btn-outline-dark" title="Retire"><small class="bi bi-recycle"></small><span class="btn-label">&nbsp; Retire</span></button>
            }
            <button @onclick="OnDeleteSchedule" class="btn btn-outline-dark" title="Delete"><small class="bi bi-trash-fill"></small><span class="btn-label">&nbsp; Delete</span></button>
        </Toolbar>
    </AppRightSidebar>

    <div>
        <table class="table table-striped">
            <tbody>
                <tr>
                    <td>Id</td>
                    <td>@schedule.Id</td>
                </tr>
                <tr>
                    <td>Created at</td>
                    <td>@schedule.CreatedAt</td>
                </tr>
                <tr>
                    <td>Last modified</td>
                    <td>@schedule.LastModified</td>
                </tr>
                <tr>
                    <td>Activation</td>
                    <td><span class="badge bg-secondary">@EnumHelper.Stringify(schedule.ActivationType)</span></td>
                </tr>
                <tr>
                    <td>Status</td>
                    <td>
                        @{
                            var background = schedule.Status switch
                            {
                                V1ScheduleStatus.Active => "bg-primary",
                                V1ScheduleStatus.Suspended => "bg-warning",
                                _ => "bg-secondary",
                            };
                        }
                        <label class="badge @background">@EnumHelper.Stringify(schedule.Status)</label>
                    </td>
                </tr>
                <tr>
                    <td>Workflow</td>
                    <td>@schedule.WorkflowId</td>
                </tr>
                <tr>
                    <td>Type</td>
                    <td><span class="badge bg-secondary">@EnumHelper.Stringify(schedule.Definition.Type)</span></td>
                </tr>
                <tr>
                    <td>Expression</td>
                    <td>@(schedule.Definition.Type == ScheduleDefinitionType.Cron ? schedule.Definition.Cron!.Expression : schedule.Definition.Interval.ToString())</td>
                </tr>
                <tr>
                    <td>Last occurence</td>
                    <td>@schedule.LastOccuredAt</td>
                </tr>
                <tr>
                    <td>Next occurence</td>
                    <td>@schedule.NextOccurenceAt</td>
                </tr>
                <tr>
                    <td>Total occurences</td>
                    <td>@schedule.TotalOccurences</td>
                </tr>
            </tbody>
        </table>
    </div>

}

@code{

    private Subject<bool>? disposeNotifier = null!;
    private V1Schedule? schedule;

    private string scheduleId = null!;
    [Parameter] public string ScheduleId { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.disposeNotifier = new Subject<bool>();
        ScheduleViewStateSelectors.SelectCurrentSchedule(this.Store)
            .TakeUntil(this.disposeNotifier)
            .Subscribe(schedule =>
            {
                this.schedule = schedule;
                this.StateHasChanged();
            });
        ScheduleViewStateSelectors.SelectIsDeleted(this.Store)
            .TakeUntil(this.disposeNotifier)
            .Subscribe(isDeleted =>
            {
                if (isDeleted) this.OnViewScheduleList();
            });
        await this.BreadcrumbManager.Use(Breadcrumbs.Schedules);
        await this.BreadcrumbManager.AddItem(new BreadcrumbItem(this.ScheduleId, $"/schedules/{this.ScheduleId}"));
        this.Dispatcher.Dispatch(new InitializeState());
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.ScheduleId != this.scheduleId)
        {
            this.scheduleId = this.ScheduleId;
            this.Dispatcher.Dispatch(new GetScheduleById(this.scheduleId));
        }
    }

    private void OnTriggerSchedule()
    {
        this.Dispatcher.Dispatch(new TriggerSchedule(this.scheduleId));
    }

    private void OnSuspendSchedule()
    {
        this.Dispatcher.Dispatch(new SuspendSchedule(this.scheduleId));
    }

    private void OnResumeSchedule()
    {
        this.Dispatcher.Dispatch(new ResumeSchedule(this.scheduleId));
    }

    private void OnRetireSchedule()
    {
        this.Dispatcher.Dispatch(new RetireSchedule(this.scheduleId));
    }

    private void OnDeleteSchedule()
    {
        this.Dispatcher.Dispatch(new DeleteSchedule(this.scheduleId));
    }

    private void OnViewScheduleList()
    {
        this.NavigationManager.NavigateTo("/schedules");
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        if (!disposing) return;
        this.disposeNotifier?.OnNext(true);
        this.disposeNotifier?.OnCompleted();
        this.disposeNotifier?.Dispose();
        this.disposeNotifier = null;
    }

}