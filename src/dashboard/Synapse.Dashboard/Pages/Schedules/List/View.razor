@*
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@page "/schedules"
@using System.Reactive.Subjects
@using System.Reactive.Linq
@inherits StatefulComponent<ScheduleCollectionState>
@inject IBreadcrumbManager BreadcrumbManager
@inject NavigationManager NavigationManager

<PageTitle>Schedules</PageTitle>

<AppRightSidebar>
    <Toolbar>
        <button @onclick="OnNewSchedule" class="btn btn-outline-dark" title="New schedule"><small class="bi bi-plus"></small><span class="btn-label"> New schedule</span></button>
    </Toolbar>
</AppRightSidebar>

@if(schedules != null)
{
    <Table Items="schedules" AutoGenerateColumns="false">
        <Columns>
            <Column T="V1Schedule"
                Name="Activation"
                ValueProvider="s => s.ActivationType">
                <CellTemplate Context="context">
                    <label class="badge bg-secondary">@EnumHelper.Stringify((V1ScheduleType)context.Value!)</label>
                </CellTemplate>
            </Column>
            <Column T="V1Schedule"
                Name="Status"
                ValueProvider="s => s.Status">
                <CellTemplate Context="context">
                    @{
                        var background = (V1ScheduleStatus)context.Value! switch
                        {
                            V1ScheduleStatus.Active => "bg-primary",
                            V1ScheduleStatus.Suspended => "bg-warning",
                            _ => "bg-secondary",
                        };
                    }
                    <label class="badge @background">@EnumHelper.Stringify((V1ScheduleStatus)context.Value)</label>
                </CellTemplate>
            </Column>
            <Column T="V1Schedule"
                Name="Created at"
                ValueProvider="s => s.CreatedAt" />
            <Column T="V1Schedule" 
                Name="Workflow"
                ValueProvider="s => s.WorkflowId"/>
            <Column T="V1Schedule"
                Name="Type"
                ValueProvider="s => s.Definition.Type">
                <CellTemplate Context="context">
                    <label class="badge bg-secondary">@EnumHelper.Stringify((ScheduleDefinitionType)context.Value!)</label>
                </CellTemplate>
            </Column>
            <Column T="V1Schedule"
                Name="Expression"
                ValueProvider="s => s.Definition.Type == ScheduleDefinitionType.Cron ? s.Definition.Cron!.Expression : s.Definition.Interval.ToString()">
            </Column>
            <Column T="V1Schedule"
                Name="Valid until"
                ValueProvider="s => s.Definition.Cron!.ValidUntil" />
            <Column T="V1Schedule"
                Name="Last occurence"
                ValueProvider="s => s.LastOccuredAt" />
            <Column T="V1Schedule"
                Name="Next occurence"
                ValueProvider="s => s.NextOccurenceAt" />
            <Column T="V1Schedule"
                Name="Total occurences"
                ValueProvider="s => s.TotalOccurences"/>
            <ViewDetailsColumn T="V1Schedule" 
                OnViewDetails="OnViewSchedule" />
        </Columns>
    </Table>
}
else
{
    <Loader />
}
@code{

    private Subject<bool>? disposeNotifier = null!;
    private List<V1Schedule>? schedules;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await this.BreadcrumbManager.Use(Breadcrumbs.Schedules);
        this.disposeNotifier = new Subject<bool>();
        ScheduleCollectionStateSelectors.SelectedSchedules(this.Store)
            .TakeUntil(this.disposeNotifier)
            .Subscribe(schedules =>
            {
                this.schedules = schedules;
                this.StateHasChanged();
            });
        this.Dispatcher.Dispatch(new QuerySchedules());
    }

    void OnNewSchedule()
    {
        this.NavigationManager.NavigateTo("/schedules/new");
    }

    void OnViewSchedule(V1Schedule schedule)
    {
        this.NavigationManager.NavigateTo($"/schedules/{schedule.Id}");
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        if (!disposing) return;
        this.disposeNotifier?.OnNext(true);
        this.disposeNotifier?.OnCompleted();
        this.disposeNotifier?.Dispose();
        this.disposeNotifier = null;
    }

}