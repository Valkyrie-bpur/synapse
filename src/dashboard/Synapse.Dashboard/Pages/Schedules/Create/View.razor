@*
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@page "/schedules/new"
@using Synapse.Integration.Commands.Schedules
@using System.Reactive.Subjects
@using System.Reactive.Linq
@inherits StatefulComponent<CreateScheduleState>
@inject IBreadcrumbManager BreadcrumbService
@inject ISynapseManagementApi SynapseApi
@inject NavigationManager NavigationManager

<PageTitle>New schedule</PageTitle>

<AppRightSidebar>
    <Toolbar>
        <button @onclick="OnCreateSchedule" disabled="@State.Creating" class="btn btn-outline-dark" title="Save the current workflow"><small class="bi bi-cloud-upload"></small><span class="btn-label">Create</span></button>
    </Toolbar>
</AppRightSidebar>

@if (State.Creating)
{
    <div class="position-relative w-100 h-100">
        <Loader />
    </div>
}
else
{
    <div class="container">
        <table class="table table-striped">
            <tbody>
                <tr title="The definition of the schedule to create">
                    <td>Definition</td>
                    <td>
                        <ScheduleEditor OnChange="@(e => OnChanged(s => s.Definition = e))" />
                    </td>
                </tr>
                <tr title="The workflow to schedule">
                    <td>Workflow</td>
                    <td>
                        <WorkflowSelector SelectedId="@workflowReference?.Id" SelectedVersion="@workflowReference?.Version" OnChange="@(e => OnChanged(s => s.WorkflowId = $"{e.Id}:{e.Version}"))" />
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
}

@code 
{

    private Subject<bool>? disposeNotifier = null!;
    private V1CreateScheduleCommand command = new() { Type = V1ScheduleType.Explicit };
    private V1WorkflowReference? workflowReference => string.IsNullOrWhiteSpace(command.WorkflowId) ? null : V1WorkflowReference.Parse(command.WorkflowId);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.disposeNotifier = new Subject<bool>();
        CreateScheduleStateSelectors.SelectCreatedSchedule(this.Store)
            .TakeUntil(this.disposeNotifier)
            .Subscribe(schedule =>
            {
                if (schedule != null) this.NavigationManager.NavigateTo("/schedules");
            });
        CreateScheduleStateSelectors.SelectError(this.Store)
            .TakeUntil(this.disposeNotifier)
            .Subscribe(errors => 
            {

            });

        await this.BreadcrumbService.Use(Breadcrumbs.CreateSchedule);
    }

    private void OnChanged(Action<V1CreateScheduleCommand> patch)
    {
        if (this.command == null) this.command = new();
        patch(this.command);
        this.StateHasChanged();
    }

    private void OnCreateSchedule()
    {
        if (this.command == null) return;
        this.Dispatcher.Dispatch(new CreateSchedule(this.command));
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        if (!disposing) return;
        this.disposeNotifier?.OnNext(true);
        this.disposeNotifier?.OnCompleted();
        this.disposeNotifier?.Dispose();
        this.disposeNotifier = null;
    }

}
