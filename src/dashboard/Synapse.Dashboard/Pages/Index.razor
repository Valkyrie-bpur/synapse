@* 
    Copyright © 2022-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard
@page "/"
@using System.Dynamic
@using System.Collections.ObjectModel
@inject ISynapseManagementApi SynapseManagementApi
@inject IBreadcrumbManager BreadcrumbService
@inject IStyleManager StyleManager

<PageTitle>Overview</PageTitle>
<AppHeader>
    <span class="h5 m-0 p-0">Overview</span>
</AppHeader>

<div class="container text-center">
    <div class="card">
        <div class="card-header">
            <h4 class="card-title">Today</h4>
        </div>
        <div class="card-body">
             <div class="row">
                <div class="col-4">
                    <div class="card-metric info">
                        <span class="card-metric-value">@dailyReport?.RunningInstances</span>
                        <span class="card-metric-name">Running instances</span>
                    </div>
                    <div class="card-metric success">
                        <span class="card-metric-value">@dailyReport?.CompletedInstances</span>
                        <span class="card-metric-name">Completed instances</span>
                    </div>
                    <div class="card-metric danger">
                        <span class="card-metric-value">@dailyReport?.FaultedInstances</span>
                        <span class="card-metric-name">Failed instances</span>
                    </div>
                    <div class="card-metric warning">
                        <span class="card-metric-value">@dailyReport?.CancelledInstances</span>
                        <span class="card-metric-name">Cancelled instances</span>
                    </div>
                </div>
                <div class="col-4">
                    <div class="position-relative text-center">
                        <Chart Configuration="@dailyExecutedInstancesChart" />
                        @if(dailyReport != null)
                        {
                            <div class="position-absolute start-50 top-50 translate-middle">
                              <h1 class="d-inline p-0 m-0">@(dailyReport.TotalInstances < 1 ? "-" : Math.Round(((double)dailyReport.CompletedInstances / dailyReport.TotalInstances) * 100, 0))</h1><span>%</span>
                              <span class="d-block">Success rate</span>
                            </div>
                        }
                    </div> 
                    <h5 class="mt-3">Executed instances</h5>
                </div>
                <div class="col-4">
                    <div class="position-relative text-center">
                        <Chart Configuration="@dailyExecutedActivitiesChart" />
                        @if(dailyReport != null)
                        {
                            <div class="position-absolute start-50 top-50 translate-middle">
                                <h1 class="d-inline p-0 m-0">@(dailyReport.TotalActivities < 1 ? "-" : Math.Round((((double)dailyReport.CompletedActivities + dailyReport.SkippedActivities) / dailyReport.TotalActivities) * 100, 0))</h1><span>%</span>
                                  <span class="d-block">Success rate</span>
                            </div>
                        }
                    </div>
                    <h5 class="mt-3">Executed activities</h5>
                </div>
            </div>
        </div>
    </div>
    <div class="card mt-3">
        <div class="card-header">
            <h4 class="card-title">This week</h4>
        </div>
        <div class="card-body">
             <div class="row">
                <div class="col-6">
                    <h5 class="mt-3">Executed instances</h5>
                    <Chart Configuration="@weeklyExecutedInstancesChart" />
                </div>
                <div class="col-6">
                    <h5 class="mt-3">Executed activities</h5>
                    <Chart Configuration="@weeklyExecutedActivitiesChart" />
                </div>
            </div>
        </div>
    </div>
</div>

@code{

    private V1OperationalReport? dailyReport;
    private List<V1OperationalReport> weekReports = new();
    private ChartConfiguration? dailyExecutedInstancesChart;
    private ChartConfiguration? dailyExecutedActivitiesChart;
    private ChartConfiguration? weeklyExecutedInstancesChart;
    private ChartConfiguration? weeklyExecutedActivitiesChart;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await this.BreadcrumbService.Use(Breadcrumbs.Home);
        try
        {
            this.dailyReport = await this.SynapseManagementApi.GetOperationalReportAsync();
        }
        catch { }
        if (this.dailyReport == null)
            this.dailyReport = new(DateTime.Now);
        var firstDayOfWeek = DateTime.Now.GetFirstDayOfWeek();
        var lastDayOfWeek = DateTime.Now.GetLastDayOfWeek();
        var currentDay = firstDayOfWeek;
        do
        {
            if (currentDay == DateTime.Now)
            {
                this.weekReports.Add(this.dailyReport);
            }
            else
            {
                V1OperationalReport report;
                try
                {
                    report = await this.SynapseManagementApi.GetOperationalReportAsync(currentDay);
                }
                catch
                {
                    report = new(currentDay);
                }
                this.weekReports.Add(report);
            }
            currentDay = currentDay.AddDays(1);
        }
        while (currentDay <= lastDayOfWeek);
        await this.BuildDailyExecutedInstancesChartAsync();
        await this.BuildDailyExecutedActivitiesChartAsync();
        await this.BuildWeeklyExecutedInstancesChartAsync();
        await this.BuildWeeklyExecutedActivitiesChartAsync();
    }

    private async ValueTask BuildDailyExecutedInstancesChartAsync()
    {
        if (this.dailyReport == null)
            return;
        this.dailyExecutedInstancesChart = new()
        {
            Type = ChartType.Doughnut,
            Data =
            {
                Labels = new()
                {
                    "Completed",
                    "Faulted",
                    "Cancelled"
                },
                Datasets = new()
                {
                    new ChartDataset()
                    {
                        Data = new()
                        {
                            dailyReport.CompletedInstances,
                            dailyReport.FaultedInstances,
                            dailyReport.CancelledInstances
                        },
                        BackgroundColor = new()
                        {
                            await this.StyleManager.GetVariableValueAsync("--bs-success"),
                            await this.StyleManager.GetVariableValueAsync("--bs-danger"),
                            await this.StyleManager.GetVariableValueAsync("--bs-warning")
                        }
                    }
                }
            }
        };
    }

    private async ValueTask BuildDailyExecutedActivitiesChartAsync()
    {
        if (this.dailyReport == null)
            return;
        this.dailyExecutedActivitiesChart = new()
        {
            Type = ChartType.Doughnut,
            Data =
            {
                Labels = new()
                {
                    "Completed",
                    "Faulted",
                    "Cancelled",
                    "Skipped"
                },
                Datasets = new()
                {
                    new ChartDataset()
                    {
                        Data = new()
                        {
                            dailyReport.CompletedActivities,
                            dailyReport.FaultedActivities,
                            dailyReport.CancelledActivities,
                            dailyReport.SkippedActivities
                        },
                        BackgroundColor = new()
                        {
                            await this.StyleManager.GetVariableValueAsync("--bs-success"),
                            await this.StyleManager.GetVariableValueAsync("--bs-danger"),
                            await this.StyleManager.GetVariableValueAsync("--bs-warning"),
                            await this.StyleManager.GetVariableValueAsync("--bs-secondary")
                        }
                    }
                }
            }
        };
    }

    private async Task BuildWeeklyExecutedInstancesChartAsync()
    {
        this.weeklyExecutedInstancesChart = new()
        {
            Type = ChartType.Line,
            Data = new()
            {
                Labels = weekReports.Select(d => d.Date.ToShortDateString()).ToList(),
                Datasets = new()
                {
                    new ChartDataset()
                    {
                        Label = "Executed",
                        Data = weekReports.Select(d => d.ExecutedInstances).OfType<object>().ToList(),
                        BorderColor = await this.StyleManager.GetVariableValueAsync("--bs-info"),
                        BorderWidth = 1.5
                    },
                    new ChartDataset()
                    {
                        Label = "Completed",
                        Data = weekReports.Select(d => d.CompletedInstances).OfType<object>().ToList(),
                        BorderColor = await this.StyleManager.GetVariableValueAsync("--bs-success"),
                        BorderWidth = 1
                    },
                    new ChartDataset()
                    {
                        Label = "Faulted",
                        Data = weekReports.Select(d => d.FaultedInstances).OfType<object>().ToList(),
                        BorderColor = await this.StyleManager.GetVariableValueAsync("--bs-danger"),
                        BorderWidth = 1
                    },
                    new ChartDataset()
                    {
                        Label = "Cancelled",
                        Data = weekReports.Select(d => d.CancelledInstances).OfType<object>().ToList(),
                        BorderColor = await this.StyleManager.GetVariableValueAsync("--bs-warning"),
                        BorderWidth = 1
                    }
                }
            }
        };
    }

    private async Task BuildWeeklyExecutedActivitiesChartAsync()
    {
         this.weeklyExecutedActivitiesChart = new()
        {
            Type = ChartType.Line,
            Data = new()
            {
                Labels = weekReports.Select(d => d.Date.ToShortDateString()).ToList(),
                Datasets = new()
                {
                    new ChartDataset()
                    {
                        Label = "Executed",
                        Data = weekReports.Select(d => d.ExecutedActivities).OfType<object>().ToList(),
                        BorderColor = await this.StyleManager.GetVariableValueAsync("--bs-info"),
                        BorderWidth = 1.5
                    },
                    new ChartDataset()
                    {
                        Label = "Completed",
                        Data = weekReports.Select(d => d.CompletedActivities).OfType<object>().ToList(),
                        BorderColor = await this.StyleManager.GetVariableValueAsync("--bs-success"),
                        BorderWidth = 1
                    },
                    new ChartDataset()
                    {
                        Label = "Faulted",
                        Data = weekReports.Select(d => d.FaultedActivities).OfType<object>().ToList(),
                        BorderColor = await this.StyleManager.GetVariableValueAsync("--bs-danger"),
                        BorderWidth = 1
                    },
                    new ChartDataset()
                    {
                        Label = "Cancelled",
                        Data = weekReports.Select(d => d.CancelledActivities).OfType<object>().ToList(),
                        BorderColor = await this.StyleManager.GetVariableValueAsync("--bs-warning"),
                        BorderWidth = 1
                    },
                    new ChartDataset()
                    {
                        Label = "Skipped",
                        Data = weekReports.Select(d => d.CancelledActivities).OfType<object>().ToList(),
                        BorderColor = await this.StyleManager.GetVariableValueAsync("--bs-secondary"),
                        BorderWidth = 1
                    }
                }
            }
        };
    }

}