@* 
    Copyright © 2022-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@page "/correlations"
@using Neuroglia.Data
@using Neuroglia.Data.Flux
@using Synapse.Integration.Models
@using System.Reactive.Linq
@inherits StatefulComponent<V1CorrelationCollectionState>
@inject IServiceProvider ServiceProvider
@inject IBreadcrumbManager BreadcrumbService
@inject NavigationManager NavigationManager

<PageTitle>Correlations</PageTitle>
<div class="row">
    <div class="col-3">
        <SearchBox PlaceHolder="Search correlations..." OnSearch="OnSearchCorrelations" OnClear="OnClearCorrelationSearch" />
    </div>
</div>
<Table Items="correlations" AutoGenerateColumns="false">
    <Columns>
        <Column T="V1Correlation"
            Name="Outcome Type"
            ValueProvider="c => EnumHelper.Stringify(c.Outcome.Type)">
            <CellTemplate Context="correl">
                <span class="badge bg-secondary">@EnumHelper.Stringify(correl.Item.Outcome.Type)</span>
            </CellTemplate>
        </Column>
        <Column T="V1Correlation"
            Name="Target"
            ValueProvider="c => c.Outcome.Target"/>
        <Column T="V1Correlation"
            Name="Condition Type"
            ValueProvider="c => EnumHelper.Stringify(c.ConditionType)">
            <CellTemplate Context="correl">
                <span class="badge bg-secondary">@EnumHelper.Stringify(correl.Item.ConditionType)</span>
            </CellTemplate>
        </Column>
            <Column T="V1Correlation"
            Name="Lifetime"
            ValueProvider="c => EnumHelper.Stringify(c.Lifetime)">
            <CellTemplate Context="correl">
                <span class="badge bg-secondary">@EnumHelper.Stringify(correl.Item.Lifetime)</span>
            </CellTemplate>
        </Column>
        <Column T="V1Correlation"
            Name="Conditions"
            ValueProvider="c => c.Conditions == null ? 0 : c.Conditions.Count"/>
        <Column T="V1Correlation" 
            Name="Contexts"
            ValueProvider="c => c.Contexts == null ? 0 : c.Contexts.Count" />
        <ViewDetailsColumn T="V1Correlation" OnViewDetails="OnViewCorrelation" />
    </Columns>
</Table>

@code {

    protected IDisposable? subscription = null!;
    private List<V1Correlation> correlations = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await this.BreadcrumbService.Use(Breadcrumbs.Correlations);
        this.subscription = this.Feature
            .Subscribe(correlations =>
            {
                this.correlations = correlations;
                this.StateHasChanged();
            });
        this.Dispatcher.Dispatch(new ListV1Correlations());
    }

    void OnSearchCorrelations(string term)
    {
        this.Dispatcher.Dispatch(new SearchV1Correlations(term));
    }

    void OnClearCorrelationSearch()
    {
        this.Dispatcher.Dispatch(new ListV1Correlations());
    }

    void OnViewCorrelation(V1Correlation correlation)
    {
        this.NavigationManager.NavigateTo($"/correlations/{correlation.Id}");
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        if (disposing)
        {
            this.subscription?.Dispose();
            this.subscription = null;
        }
    }

}
