@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@page "/correlations/{correlationId}"
@using Microsoft.AspNetCore.SignalR.Client
@using Neuroglia.Data.Flux
@using Neuroglia.Serialization
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@using System.Reactive.Subjects
@using System.Reactive.Linq
@using System.Text
@using Synapse.Integration.Models;
@using Synapse.Integration.Events.WorkflowInstances
@inherits StatefulComponent<CorrelationViewState>
@inject ISynapseManagementApi SynapseApi
@inject IMonacoEditorHelper MonacoEditorHelper
@inject IBreadcrumbManager BreadcrumbManager
@inject IJsonSerializer Serializer
@inject IJSRuntime JS
@inject HubConnection HubConnection
@inject NavigationManager NavigationManager

<PageTitle>Correlation @correlation?.Id</PageTitle>

@if (correlation != null)
{

    <AppRightSidebar>
        <Toolbar>
            <button @onclick="OnNavigateToCorrelationList" class="btn btn-outline-dark" title="Back to list"><small class="bi bi-arrow-left"></small><span class="btn-label">&nbsp; Back to list</span></button>
            @if(correlation.ActivationType == V1CorrelationActivationType.Explicit)
            {
                <button @onclick="OnSaveChanges" class="btn btn-outline-dark" title="Save changes made to the correlation"><small class="bi bi-cloud-upload"></small><span class="btn-label"> Save changes</span></button>
                <button @onclick="OnDeleteCorrelation" class="btn btn-outline-dark" title="Delete the correlation"><small class="bi bi-trash"></small><span class="btn-label"> Delete</span></button>
            }
        </Toolbar>
    </AppRightSidebar>

    var highlightedAttributes = correlation.Conditions.SelectMany(c => c.Filters.SelectMany(f => f.Attributes.Select(a => a.Key).Union(f.CorrelationMappings.Select(a => a.Key)))).Distinct();
    <div class="container-fluid h-100">
        <div class="row">
            <div class="col-6">

                <h4 class="mb-2">Information</h4>
                <div class="border border-secondary rounded-2 p-3 mb-3">
                    <table class="table table-striped">
                        <tbody>
                            <tr>
                                <td>Id</td>
                                <td>@correlation.Id</td>
                            </tr>
                               <tr>
                                <td>Created at</td>
                                <td>@correlation.CreatedAt</td>
                            </tr>
                               <tr>
                                <td>Last Modified</td>
                                <td>@correlation.LastModified</td>
                            </tr>
                            <tr>
                                <td>Activation</td>
                                <td><span class="badge bg-secondary">@EnumHelper.Stringify(correlation.ActivationType)</span></td>
                            </tr>
                            <tr>
                                <td>Lifetime</td>
                                <td><span class="badge bg-secondary">@EnumHelper.Stringify(correlation.Lifetime)</span></td>
                            </tr>
                            <tr>
                                <td>Condition Type</td>
                                <td><span class="badge bg-secondary">@EnumHelper.Stringify(correlation.ConditionType)</span></td>
                            </tr>
                            <tr>
                                <td>Outcome</td>
                                <td>
                                    <table class="table table-striped">
                                        <tbody>
                                            <tr>
                                                <td>Type</td>
                                                <td><span class="badge bg-secondary">@EnumHelper.Stringify(correlation.Outcome.Type)</span></td>
                                            </tr>
                                            <tr>
                                                <td>Target</td>
                                                <td><a href="@(correlation.Outcome.Type == V1CorrelationOutcomeType.Start ? $"/workflows/{correlation.Outcome.Target}" : $"/workflows/instance/{correlation.Outcome.Target}")">@correlation.Outcome.Target</a></td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <h4 class="mb-2">Conditions</h4>
                @foreach (var condition in correlation.Conditions)
                {
                    <div class="border border-secondary rounded-2 p-3 mb-3">
                        @foreach(var filter in condition.Filters)
                        {
                            <h5>Attributes</h5>
                            @if(filter.Attributes != null
                            && filter.Attributes.Any())
                            {
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Attribute</th>
                                            <th>Value</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach(var attr in filter.Attributes)
                                        {
                                            <tr>
                                                <td>@attr.Key</td>
                                                <td><span class="badge bg-secondary">@attr.Value</span></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                 <b>None</b>
                            }
                            
                            <h5>Correlation Mappings</h5>
                            @if(filter.CorrelationMappings != null
                                && filter.CorrelationMappings.Any())
                            {
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Attribute</th>
                                            <th>Value</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach(var mapping in filter.CorrelationMappings)
                                        {
                                            <tr>
                                                <td>@mapping.Key</td>
                                                <td><span class="badge bg-secondary">@mapping.Value</span></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                <b>None</b>
                            }
                        }
                        <button @onclick="_ => OnTriggerCondition(condition)" class="btn btn-primary w-100"><span class="bi bi-cloud-arrow-up"></span><span>Trigger</span></button>
                    </div>
                }
            </div>
            <div class="col-6">
                <h4 class="mb-2">Contexts</h4>
                @foreach (var context in correlation.Contexts)
                {
                    <div class="border border-secondary rounded-2 p-3 mb-3">
                        <Expander>
                            <Header>
                                <div class="row">
                                    <div class="col-10">
                                        @foreach(var mapping in context.Mappings)
                                        {
                                            <span class="badge bg-secondary">@mapping.Key: @mapping.Value</span>
                                        }
                                    </div>
                                    <div class="col-2 align-content-end">
                                        <button @onclick="e => OnDeleteCorrelationContext(context)" @onclick:preventDefault="true" @onclick:stopPropagation="true" title="Delete the context" class="btn btn-danger d-flex ms-auto"><span class="bi bi-trash-fill"></span></button>
                                    </div>
                                </div>
                            </Header>
                            <Body>

                                <h5>Information</h5>
                                <div class="border border-secondary rounded-2 p-3 mb-3">
                                    <table class="table table-striped">
                                        <tbody>
                                            <tr>
                                                <td>Id</td>
                                                <td>@context.Id</td>
                                            </tr>
                                            <tr>
                                                <td>Created at</td>
                                                <td>@context.CreatedAt</td>
                                            </tr>
                                            <tr>
                                                <td>Last Modified</td>
                                                <td>@context.LastModified</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                                                              
                                <h5>Correlation Mappings</h5>
                                <div class="border border-secondary rounded-2 p-3 mb-3">
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>Attribute</th>
                                                <th>Value</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach(var mapping in context.Mappings)
                                            {
                                                <tr>
                                                    <td>@mapping.Key</td>
                                                    <td><span class="badge bg-warning">@mapping.Value</span></td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>

                                <h5>Correlated Events (count: @context.PendingEvents.Count)</h5>
                                @foreach(var e in context.PendingEvents)
                                {
                                    <Expander Class="border border-dark rounded-2 p-3 my-3">
                                        <Header>
                                            <div class="row">
                                                <div class="col-10"><span>@e.Id</span></div>
                                                <div class="col-2 align-content-end">
                                                    <button @onclick="args => OnDeleteCorrelatedEvent(context, e)" @onclick:preventDefault="true" @onclick:stopPropagation="true" title="Delete the correlated event" class="btn btn-danger d-flex ms-auto"><span class="bi bi-trash-fill"></span></button>
                                                </div>
                                            </div>
                                        </Header>
                                        <Body>
                                            <table class="table table-striped table-bordered">
                                                <tbody>
                                                    @foreach (var attr in e.Attributes)
                                                    {
                                                        <tr>
                                                            <td>@attr.Key</td>
                                                            <td><span class="badge bg-@(highlightedAttributes.Contains(attr.Key) ? "warning" : "secondary")">@attr.Value</span></td>
                                                        </tr>
                                                    }
                                                    <tr>
                                                        <td>data</td>
                                                        <td><pre class="text-white fw-bold p-1 bg-secondary">@JsonConvert.SerializeObject(e.Data, Formatting.Indented)</pre></td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </Body>
                                    </Expander>
                                }
                            </Body>
                        </Expander>
                    </div>
                }
            </div>
        </div>
    </div>
    <PublishEventModal @ref="publishEventModal" CloudEvent="cloudEvent" OnActiveChange="OnPublishCloudEventModalActiveChange" />
}
else
{
    <Loader />
}
@code
{

    private Subject<bool>? disposeNotifier;
    private V1Correlation? correlation;
    private PublishEventModal? publishEventModal;
    private V1Event? cloudEvent;

    private string correlationId = null!;
    [Parameter] public string CorrelationId { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.disposeNotifier = new Subject<bool>();
        Selectors.SelectCurrentCorrelation(this.Store)
            .TakeUntil(this.disposeNotifier)
            .Subscribe(correlation =>
            {
                this.correlation = correlation;
                this.StateHasChanged();
            });
        Selectors.SelectPublishCloudEventModalOpened(this.Store)
            .TakeUntil(this.disposeNotifier)
            .Subscribe(async isOpen =>
            {
                if (isOpen && this.publishEventModal != null) await this.publishEventModal.ShowAsync();
                else if (this.publishEventModal != null) await this.publishEventModal.HideAsync();
                this.StateHasChanged();
            });
        Selectors.SelectCurrentEvent(this.Store)
           .TakeUntil(this.disposeNotifier)
           .Subscribe(e =>
           {
               this.cloudEvent = e;
               this.StateHasChanged();
           });
        await this.BreadcrumbManager.Use(Breadcrumbs.Correlations);
        await this.BreadcrumbManager.AddItem(new BreadcrumbItem(this.CorrelationId, $"/correlations/{this.CorrelationId}"));
    }

    protected override async Task OnParametersSetAsync()
    {
        if (this.correlationId != this.CorrelationId)
        {
            this.correlationId = this.CorrelationId;
            this.Dispatcher.Dispatch(new GetCorrelationById(this.correlationId));
        }
    }

    private void OnTriggerCondition(V1CorrelationCondition condition)
    {
        this.Dispatcher.Dispatch(new ShowPublishCloudEventModal(condition));
    }

    private void OnCloudEventChanged(Action<V1Event> patch)
    {

    }

    private void OnPublishCloudEventModalActiveChange(bool active)
    {
        if (!active && this.State.PublishCloudEventModalOpened) this.Dispatcher.Dispatch(new HidePublishCloudEventModal());
    }

    private void OnNavigateToCorrelationList()
    {
        this.NavigationManager.NavigateTo("/correlations");
    }

    private void OnDeleteCorrelation()
    {

    }

    private void OnDeleteCorrelationContext(V1CorrelationContext context)
    {
        if (this.correlation == null) return;
        this.Dispatcher.Dispatch(new DeleteCorrelationContext(this.correlation.Id, context.Id));
    }

    private void OnDeleteCorrelatedEvent(V1CorrelationContext context, V1Event e)
    {
        if (this.correlation == null) return;
        this.Dispatcher.Dispatch(new DeleteCorrelatedEvent(this.correlation.Id, context.Id, e.Id));
    }

    private void OnSaveChanges()
    {

    }

    protected override void Dispose(bool disposing)
    {
        if (!disposing) return;
        if (this.disposeNotifier != null)
        {
            this.disposeNotifier.OnNext(true);
            this.disposeNotifier.OnCompleted();
            this.disposeNotifier.Dispose();
            this.disposeNotifier = null;
        }
        base.Dispose(disposing);
    }

}